; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\system_stm32l4xx.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\system_stm32l4xx.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\system_stm32l4xx.crf system_stm32l4xx.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;271      */
;;;272    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;273    {
;;;274      uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
;;;275    
;;;276      /* Get MSI Range frequency--------------------------------------------------*/
;;;277      if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
000002  4c25              LDR      r4,|L1.152|
000004  6820              LDR      r0,[r4,#0]
000006  0700              LSLS     r0,r0,#28
000008  d404              BMI      |L1.20|
;;;278      { /* MSISRANGE from RCC_CSR applies */
;;;279        msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
00000a  f8d40094          LDR      r0,[r4,#0x94]
00000e  f3c02003          UBFX     r0,r0,#8,#4
000012  e002              B        |L1.26|
                  |L1.20|
;;;280      }
;;;281      else
;;;282      { /* MSIRANGE from RCC_CR applies */
;;;283        msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
000014  6820              LDR      r0,[r4,#0]
000016  f3c01003          UBFX     r0,r0,#4,#4
                  |L1.26|
;;;284      }
;;;285      /*MSI frequency range in HZ*/
;;;286      msirange = MSIRangeTable[msirange];
00001a  4920              LDR      r1,|L1.156|
00001c  f8511020          LDR      r1,[r1,r0,LSL #2]
;;;287    
;;;288      /* Get SYSCLK source -------------------------------------------------------*/
;;;289      switch (RCC->CFGR & RCC_CFGR_SWS)
000020  68a0              LDR      r0,[r4,#8]
;;;290      {
;;;291        case 0x00:  /* MSI used as system clock source */
;;;292          SystemCoreClock = msirange;
000022  4a1f              LDR      r2,|L1.160|
000024  f010000c          ANDS     r0,r0,#0xc            ;289
000028  d007              BEQ      |L1.58|
;;;293          break;
;;;294    
;;;295        case 0x04:  /* HSI used as system clock source */
;;;296          SystemCoreClock = HSI_VALUE;
00002a  4d1e              LDR      r5,|L1.164|
00002c  2804              CMP      r0,#4                 ;289
00002e  d006              BEQ      |L1.62|
;;;297          break;
;;;298    
;;;299        case 0x08:  /* HSE used as system clock source */
;;;300          SystemCoreClock = HSE_VALUE;
000030  106e              ASRS     r6,r5,#1
000032  2808              CMP      r0,#8                 ;289
000034  d005              BEQ      |L1.66|
000036  280c              CMP      r0,#0xc               ;289
000038  d005              BEQ      |L1.70|
                  |L1.58|
00003a  6011              STR      r1,[r2,#0]            ;293  ; SystemCoreClock
00003c  e01c              B        |L1.120|
                  |L1.62|
00003e  6015              STR      r5,[r2,#0]            ;297  ; SystemCoreClock
000040  e01a              B        |L1.120|
                  |L1.66|
;;;301          break;
000042  6016              STR      r6,[r2,#0]  ; SystemCoreClock
000044  e018              B        |L1.120|
                  |L1.70|
;;;302    
;;;303        case 0x0C:  /* PLL used as system clock  source */
;;;304          /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
;;;305             SYSCLK = PLL_VCO / PLLR
;;;306             */
;;;307          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
000046  68e0              LDR      r0,[r4,#0xc]
000048  f0000303          AND      r3,r0,#3
;;;308          pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  f3c01002          UBFX     r0,r0,#4,#3
000052  1c40              ADDS     r0,r0,#1
;;;309    
;;;310          switch (pllsource)
000054  2b02              CMP      r3,#2
000056  d019              BEQ      |L1.140|
000058  2b03              CMP      r3,#3
00005a  d01a              BEQ      |L1.146|
;;;311          {
;;;312            case 0x02:  /* HSI used as PLL clock source */
;;;313              pllvco = (HSI_VALUE / pllm);
;;;314              break;
;;;315    
;;;316            case 0x03:  /* HSE used as PLL clock source */
;;;317              pllvco = (HSE_VALUE / pllm);
;;;318              break;
;;;319    
;;;320            default:    /* MSI used as PLL clock source */
;;;321              pllvco = (msirange / pllm);
00005c  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.96|
;;;322              break;
;;;323          }
;;;324          pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
000060  68e1              LDR      r1,[r4,#0xc]
000062  f3c12106          UBFX     r1,r1,#8,#7
000066  4341              MULS     r1,r0,r1
;;;325          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
000068  68e0              LDR      r0,[r4,#0xc]
00006a  f3c06041          UBFX     r0,r0,#25,#2
00006e  1c40              ADDS     r0,r0,#1
000070  0040              LSLS     r0,r0,#1
;;;326          SystemCoreClock = pllvco/pllr;
000072  fbb1f0f0          UDIV     r0,r1,r0
000076  6010              STR      r0,[r2,#0]  ; SystemCoreClock
                  |L1.120|
;;;327          break;
;;;328    
;;;329        default:
;;;330          SystemCoreClock = msirange;
;;;331          break;
;;;332      }
;;;333      /* Compute HCLK clock frequency --------------------------------------------*/
;;;334      /* Get HCLK prescaler */
;;;335      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
000078  68a0              LDR      r0,[r4,#8]
00007a  4908              LDR      r1,|L1.156|
00007c  f3c01003          UBFX     r0,r0,#4,#4
000080  3910              SUBS     r1,r1,#0x10
000082  5c08              LDRB     r0,[r1,r0]
;;;336      /* HCLK clock frequency */
;;;337      SystemCoreClock >>= tmp;
000084  6811              LDR      r1,[r2,#0]  ; SystemCoreClock
000086  40c1              LSRS     r1,r1,r0
000088  6011              STR      r1,[r2,#0]  ; SystemCoreClock
;;;338    }
00008a  bd70              POP      {r4-r6,pc}
                  |L1.140|
00008c  fbb5f0f0          UDIV     r0,r5,r0              ;313
000090  e7e6              B        |L1.96|
                  |L1.146|
000092  fbb6f0f0          UDIV     r0,r6,r0              ;317
000096  e7e3              B        |L1.96|
;;;339    
                          ENDP

                  |L1.152|
                          DCD      0x40021000
                  |L1.156|
                          DCD      ||.constdata||+0x10
                  |L1.160|
                          DCD      ||.data||
                  |L1.164|
                          DCD      0x00f42400

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;195    
;;;196    void SystemInit(void)
000000  480d              LDR      r0,|L2.56|
;;;197    {
;;;198      /* FPU settings ------------------------------------------------------------*/
;;;199      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;200        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  6801              LDR      r1,[r0,#0]
000004  f4410170          ORR      r1,r1,#0xf00000
000008  6001              STR      r1,[r0,#0]
;;;201      #endif
;;;202    
;;;203      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;204      /* Set MSION bit */
;;;205      RCC->CR |= RCC_CR_MSION;
00000a  480c              LDR      r0,|L2.60|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410101          ORR      r1,r1,#1
000012  6001              STR      r1,[r0,#0]
;;;206    
;;;207      /* Reset CFGR register */
;;;208      RCC->CFGR = 0x00000000U;
000014  2100              MOVS     r1,#0
000016  6081              STR      r1,[r0,#8]
;;;209    
;;;210      /* Reset HSEON, CSSON , HSION, and PLLON bits */
;;;211      RCC->CR &= 0xEAF6FFFFU;
000018  6802              LDR      r2,[r0,#0]
00001a  4b09              LDR      r3,|L2.64|
00001c  401a              ANDS     r2,r2,r3
00001e  6002              STR      r2,[r0,#0]
;;;212    
;;;213      /* Reset PLLCFGR register */
;;;214      RCC->PLLCFGR = 0x00001000U;
000020  1482              ASRS     r2,r0,#18
000022  60c2              STR      r2,[r0,#0xc]
;;;215    
;;;216      /* Reset HSEBYP bit */
;;;217      RCC->CR &= 0xFFFBFFFFU;
000024  6802              LDR      r2,[r0,#0]
000026  f4222280          BIC      r2,r2,#0x40000
00002a  6002              STR      r2,[r0,#0]
;;;218    
;;;219      /* Disable all interrupts */
;;;220      RCC->CIER = 0x00000000U;
00002c  6181              STR      r1,[r0,#0x18]
;;;221    
;;;222      /* Configure the Vector Table location add offset address ------------------*/
;;;223    #ifdef VECT_TAB_SRAM
;;;224      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;225    #else
;;;226      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00002e  4902              LDR      r1,|L2.56|
000030  03c0              LSLS     r0,r0,#15
000032  3980              SUBS     r1,r1,#0x80
000034  6008              STR      r0,[r1,#0]
;;;227    #endif
;;;228    }
000036  4770              BX       lr
;;;229    
                          ENDP

                  |L2.56|
                          DCD      0xe000ed88
                  |L2.60|
                          DCD      0x40021000
                  |L2.64|
                          DCD      0xeaf6ffff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  AHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  MSIRangeTable
                          DCD      0x000186a0
                          DCD      0x00030d40
                          DCD      0x00061a80
                          DCD      0x000c3500
                          DCD      0x000f4240
                          DCD      0x001e8480
                          DCD      0x003d0900
                          DCD      0x007a1200
                          DCD      0x00f42400
                          DCD      0x016e3600
                          DCD      0x01e84800
                          DCD      0x02dc6c00

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  APBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x003d0900

;*** Start embedded assembler ***

#line 1 "system_stm32l4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l4xx_c_5d646a67____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___18_system_stm32l4xx_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l4xx_c_5d646a67____REVSH|
#line 402
|__asm___18_system_stm32l4xx_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l4xx_c_5d646a67____RRX|
#line 587
|__asm___18_system_stm32l4xx_c_5d646a67____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
