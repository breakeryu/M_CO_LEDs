; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\usart.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\usart.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\usart.crf ..\SYSTEM\usart\usart.c]
                          THUMB

                          AREA ||i.HAL_UART_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_UART_MspInit PROC
;;;111     */
;;;112    void HAL_UART_MspInit(UART_HandleTypeDef *huart)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114        //GPIO端口设置
;;;115        GPIO_InitTypeDef GPIO_Initure;
;;;116    
;;;117        if(huart->Instance == USART1) //如果是串口1，进行串口1 MSP初始化
000002  6800              LDR      r0,[r0,#0]
000004  4916              LDR      r1,|L1.96|
000006  b086              SUB      sp,sp,#0x18           ;113
000008  4288              CMP      r0,r1
00000a  d127              BNE      |L1.92|
;;;118        {
;;;119            __HAL_RCC_GPIOA_CLK_ENABLE();				//使能GPIOA时钟
00000c  4815              LDR      r0,|L1.100|
00000e  6cc1              LDR      r1,[r0,#0x4c]
000010  f0410101          ORR      r1,r1,#1
000014  64c1              STR      r1,[r0,#0x4c]
000016  6cc1              LDR      r1,[r0,#0x4c]
000018  f0010101          AND      r1,r1,#1
;;;120            __HAL_RCC_USART1_CLK_ENABLE();				//使能USART1时钟
00001c  9105              STR      r1,[sp,#0x14]
00001e  6e01              LDR      r1,[r0,#0x60]
000020  f4414180          ORR      r1,r1,#0x4000
000024  6601              STR      r1,[r0,#0x60]
000026  6e00              LDR      r0,[r0,#0x60]
;;;121    
;;;122            GPIO_Initure.Pin = GPIO_PIN_9;				//PA9
;;;123            GPIO_Initure.Mode = GPIO_MODE_AF_PP;		//复用推挽输出
;;;124            GPIO_Initure.Pull = GPIO_PULLUP;			//上拉
000028  2101              MOVS     r1,#1
00002a  f4004080          AND      r0,r0,#0x4000         ;120
00002e  9005              STR      r0,[sp,#0x14]         ;122
000030  f44f7000          MOV      r0,#0x200             ;122
000034  9000              STR      r0,[sp,#0]            ;123
000036  2002              MOVS     r0,#2                 ;123
000038  e9cd0101          STRD     r0,r1,[sp,#4]
;;;125            GPIO_Initure.Speed = GPIO_SPEED_FAST;		//高速
;;;126            GPIO_Initure.Alternate = GPIO_AF7_USART1;	//复用为USART1
00003c  9003              STR      r0,[sp,#0xc]
00003e  2007              MOVS     r0,#7
;;;127            HAL_GPIO_Init(GPIOA, &GPIO_Initure);	   	//初始化PA9
000040  f04f4490          MOV      r4,#0x48000000
000044  9004              STR      r0,[sp,#0x10]
000046  4669              MOV      r1,sp
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       HAL_GPIO_Init
;;;128    
;;;129            GPIO_Initure.Pin = GPIO_PIN_10;				//PA10
00004e  f44f6180          MOV      r1,#0x400
;;;130            HAL_GPIO_Init(GPIOA, &GPIO_Initure);	   	//初始化PA10
000052  9100              STR      r1,[sp,#0]
000054  4669              MOV      r1,sp
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       HAL_GPIO_Init
                  |L1.92|
;;;131        }
;;;132    
;;;133    }
00005c  b006              ADD      sp,sp,#0x18
00005e  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  |L1.96|
                          DCD      0x40013800
                  |L1.100|
                          DCD      0x40021000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;145     */
;;;146    void USART1_IRQHandler(void)
000000  b538              PUSH     {r3-r5,lr}
;;;147    {
;;;148        u8 Res;
;;;149    
;;;150        if((__HAL_UART_GET_FLAG(&UART1_Handler, UART_FLAG_RXNE) != RESET)) //接收中断(接收到的数据必须是0x0d 0x0a结尾)
000002  4818              LDR      r0,|L2.100|
000004  6800              LDR      r0,[r0,#0]  ; UART1_Handler
000006  69c0              LDR      r0,[r0,#0x1c]
000008  43c0              MVNS     r0,r0
00000a  0680              LSLS     r0,r0,#26
00000c  d422              BMI      |L2.84|
;;;151        {
;;;152            HAL_UART_Receive(&UART1_Handler, &Res, 1, 1000);
00000e  f44f737a          MOV      r3,#0x3e8
000012  2201              MOVS     r2,#1
000014  4669              MOV      r1,sp
000016  4813              LDR      r0,|L2.100|
000018  f7fffffe          BL       HAL_UART_Receive
;;;153    
;;;154            if((USART_RX_STA & 0x8000) == 0) //接收未完成
00001c  4a12              LDR      r2,|L2.104|
00001e  8810              LDRH     r0,[r2,#0]  ; USART_RX_STA
000020  0401              LSLS     r1,r0,#16
000022  d417              BMI      |L2.84|
;;;155            {
;;;156                if(USART_RX_STA & 0x4000) //接收到了0x0d
000024  0441              LSLS     r1,r0,#17
;;;157                {
;;;158                    if(Res != 0x0a)USART_RX_STA = 0; //接收错误,重新开始
;;;159    
;;;160                    else USART_RX_STA |= 0x8000;	//接收完成了
;;;161                }
;;;162                else //还没收到0X0D
;;;163                {
;;;164                    if(Res == 0x0d)USART_RX_STA |= 0x4000;
000026  f89d1000          LDRB     r1,[sp,#0]
00002a  f04f0300          MOV      r3,#0                 ;156
00002e  d504              BPL      |L2.58|
000030  290a              CMP      r1,#0xa               ;158
000032  d10e              BNE      |L2.82|
000034  f4404000          ORR      r0,r0,#0x8000         ;160
000038  e012              B        |L2.96|
                  |L2.58|
00003a  290d              CMP      r1,#0xd
00003c  d00e              BEQ      |L2.92|
;;;165                    else
;;;166                    {
;;;167                        USART_RX_BUF[USART_RX_STA & 0X3FFF] = Res ;
00003e  f3c0040d          UBFX     r4,r0,#0,#14
000042  4d08              LDR      r5,|L2.100|
000044  1c40              ADDS     r0,r0,#1
000046  3dc8              SUBS     r5,r5,#0xc8
;;;168                        USART_RX_STA++;
000048  b280              UXTH     r0,r0
00004a  5529              STRB     r1,[r5,r4]            ;167
00004c  8010              STRH     r0,[r2,#0]
;;;169    
;;;170                        if(USART_RX_STA > (USART_REC_LEN - 1))USART_RX_STA = 0; //接收数据错误,重新开始接收
00004e  28c7              CMP      r0,#0xc7
000050  d900              BLS      |L2.84|
                  |L2.82|
000052  8013              STRH     r3,[r2,#0]
                  |L2.84|
;;;171                    }
;;;172                }
;;;173            }
;;;174        }
;;;175        HAL_UART_IRQHandler(&UART1_Handler);
000054  4803              LDR      r0,|L2.100|
000056  f7fffffe          BL       HAL_UART_IRQHandler
;;;176    }
00005a  bd38              POP      {r3-r5,pc}
                  |L2.92|
00005c  f4404080          ORR      r0,r0,#0x4000         ;164
                  |L2.96|
000060  8010              STRH     r0,[r2,#0]            ;164
000062  e7f7              B        |L2.84|
;;;177    
                          ENDP

                  |L2.100|
                          DCD      ||.bss||+0xc8
                  |L2.104|
                          DCD      ||.data||

                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;44      */
;;;45     void _sys_exit(int x)
000000  4770              BX       lr
;;;46     {
;;;47         x = x;
;;;48     }
;;;49     /**
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;56      */
;;;57     int fputc(int ch, FILE *f)
000000  4904              LDR      r1,|L4.20|
                  |L4.2|
;;;58     {
;;;59         while((USART1->ISR & 0X40) == 0); //循环发送,直到发送完毕
000002  680a              LDR      r2,[r1,#0]
000004  0652              LSLS     r2,r2,#25
000006  d5fc              BPL      |L4.2|
;;;60     
;;;61         USART1->TDR = (u8) ch;
000008  4a02              LDR      r2,|L4.20|
00000a  b2c1              UXTB     r1,r0
00000c  320c              ADDS     r2,r2,#0xc
00000e  8011              STRH     r1,[r2,#0]
;;;62         return ch;
;;;63     }
000010  4770              BX       lr
;;;64     #endif
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x4001381c

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;86      */
;;;87     void uart_init(u32 bound)
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89         //UART 初始化设置
;;;90         UART1_Handler.Instance = USART1;					  //USART1
000002  4c0f              LDR      r4,|L5.64|
000004  490d              LDR      r1,|L5.60|
000006  e9c41000          STRD     r1,r0,[r4,#0]
;;;91         UART1_Handler.Init.BaudRate = bound;				  //波特率
;;;92         UART1_Handler.Init.WordLength = UART_WORDLENGTH_8B; //字长为8位数据格式
00000a  2000              MOVS     r0,#0
;;;93         UART1_Handler.Init.StopBits = UART_STOPBITS_1;	  //一个停止位
00000c  60a0              STR      r0,[r4,#8]  ; UART1_Handler
;;;94         UART1_Handler.Init.Parity = UART_PARITY_NONE;		  //无奇偶校验位
00000e  60e0              STR      r0,[r4,#0xc]  ; UART1_Handler
;;;95         UART1_Handler.Init.HwFlowCtl = UART_HWCONTROL_NONE; //无硬件流控
000010  6120              STR      r0,[r4,#0x10]  ; UART1_Handler
;;;96         UART1_Handler.Init.Mode = UART_MODE_TX_RX;		  //收发模式
000012  61a0              STR      r0,[r4,#0x18]  ; UART1_Handler
000014  200c              MOVS     r0,#0xc
;;;97         HAL_UART_Init(&UART1_Handler);					    //HAL_UART_Init()会使能UART1
000016  6160              STR      r0,[r4,#0x14]  ; UART1_Handler
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_UART_Init
;;;98     
;;;99         __HAL_UART_ENABLE_IT(&UART1_Handler, UART_IT_RXNE); //开启接收中断
00001e  6820              LDR      r0,[r4,#0]  ; UART1_Handler
000020  6801              LDR      r1,[r0,#0]
000022  f0410120          ORR      r1,r1,#0x20
000026  6001              STR      r1,[r0,#0]
;;;100        HAL_NVIC_EnableIRQ(USART1_IRQn);					//使能USART1中断通道
000028  2025              MOVS     r0,#0x25
00002a  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;101        HAL_NVIC_SetPriority(USART1_IRQn, 3, 3);				//抢占优先级3，子优先级3
00002e  2203              MOVS     r2,#3
000030  e8bd4010          POP      {r4,lr}
000034  4611              MOV      r1,r2
000036  2025              MOVS     r0,#0x25
000038  f7ffbffe          B.W      HAL_NVIC_SetPriority
;;;102    }
;;;103    
                          ENDP

                  |L5.60|
                          DCD      0x40013800
                  |L5.64|
                          DCD      ||.bss||+0xc8

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USART_RX_BUF
                          %        200
                  UART1_Handler
                          %        120

                          AREA ||.data||, DATA, ALIGN=1

                  USART_RX_STA
000000  0000              DCW      0x0000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  __stdout
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\SYSTEM\\usart\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___7_usart_c_9275e5e5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REVSH|
#line 402
|__asm___7_usart_c_9275e5e5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____RRX|
#line 587
|__asm___7_usart_c_9275e5e5____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
