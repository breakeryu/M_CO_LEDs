; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\sys.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\sys.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\sys.crf ..\SYSTEM\sys\sys.c]
                          THUMB

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;37      */
;;;38     void SystemClock_Config(void)
000000  481a              LDR      r0,|L1.108|
;;;39     {
000002  b510              PUSH     {r4,lr}
;;;40         HAL_StatusTypeDef	ret = HAL_OK;
;;;41     
;;;42         RCC_OscInitTypeDef RCC_OscInitStruct;
;;;43         RCC_ClkInitTypeDef RCC_ClkInitStruct;
;;;44     
;;;45         __HAL_RCC_PWR_CLK_ENABLE(); //Ê¹ÄÜPWRÊ±ÖÓ
000004  6d81              LDR      r1,[r0,#0x58]
000006  b098              SUB      sp,sp,#0x60           ;39
000008  f0415180          ORR      r1,r1,#0x10000000
00000c  6581              STR      r1,[r0,#0x58]
00000e  6d80              LDR      r0,[r0,#0x58]
;;;46     
;;;47         /*Initializes the CPU, AHB and APB busses clocks*/
;;;48         RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
000010  2101              MOVS     r1,#1
000012  f0005080          AND      r0,r0,#0x10000000     ;45
;;;49         RCC_OscInitStruct.HSEState = RCC_HSE_ON;
000016  9016              STR      r0,[sp,#0x58]
000018  0408              LSLS     r0,r1,#16
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
;;;50         RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
00001e  2002              MOVS     r0,#2
;;;51         RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
000020  2403              MOVS     r4,#3
000022  900a              STR      r0,[sp,#0x28]
000024  e9cd410b          STRD     r4,r1,[sp,#0x2c]
;;;52         RCC_OscInitStruct.PLL.PLLM = 1;
;;;53         RCC_OscInitStruct.PLL.PLLN = 20;
000028  2114              MOVS     r1,#0x14
;;;54         RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
00002a  910d              STR      r1,[sp,#0x34]
00002c  2107              MOVS     r1,#7
00002e  e9cd100e          STRD     r1,r0,[sp,#0x38]
;;;55         RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
;;;56         RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
;;;57     
;;;58         ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
000032  9010              STR      r0,[sp,#0x40]
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       HAL_RCC_OscConfig
;;;59     
;;;60         if(ret != HAL_OK)	while(1);
00003a  b100              CBZ      r0,|L1.62|
                  |L1.60|
00003c  e7fe              B        |L1.60|
                  |L1.62|
;;;61     
;;;62         /*Initializes the CPU, AHB and APB busses clocks*/
;;;63         RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
00003e  200f              MOVS     r0,#0xf
000040  e9cd0411          STRD     r0,r4,[sp,#0x44]
;;;64                                       | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
;;;65         RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
;;;66         RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
000044  2000              MOVS     r0,#0
;;;67         RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
000046  9013              STR      r0,[sp,#0x4c]
;;;68         RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
000048  9014              STR      r0,[sp,#0x50]
;;;69     
;;;70     
;;;71         ret	= HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
00004a  9015              STR      r0,[sp,#0x54]
00004c  2104              MOVS     r1,#4
00004e  a811              ADD      r0,sp,#0x44
000050  f7fffffe          BL       HAL_RCC_ClockConfig
;;;72     
;;;73         if(ret != HAL_OK)	while(1);
000054  b100              CBZ      r0,|L1.88|
                  |L1.86|
000056  e7fe              B        |L1.86|
                  |L1.88|
;;;74     
;;;75         /*Configure the main internal regulator output voltage*/
;;;76         ret = HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
000058  f44f7000          MOV      r0,#0x200
00005c  f7fffffe          BL       HAL_PWREx_ControlVoltageScaling
;;;77     
;;;78         if(ret != HAL_OK)	while(1);
000060  2800              CMP      r0,#0
000062  d000              BEQ      |L1.102|
                  |L1.100|
000064  e7fe              B        |L1.100|
                  |L1.102|
;;;79     }
000066  b018              ADD      sp,sp,#0x60
000068  bd10              POP      {r4,pc}
;;;80     
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      0x40021000

;*** Start embedded assembler ***

#line 1 "..\\SYSTEM\\sys\\sys.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_4557ba80____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___5_sys_c_4557ba80____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_4557ba80____REVSH|
#line 402
|__asm___5_sys_c_4557ba80____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_4557ba80____RRX|
#line 587
|__asm___5_sys_c_4557ba80____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |WFI_SET|
#line 89 "..\\SYSTEM\\sys\\sys.c"
|WFI_SET| PROC
#line 90

 WFI
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |INTX_DISABLE|
#line 100
|INTX_DISABLE| PROC
#line 101

 CPSID I
 BX LR 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |INTX_ENABLE|
#line 112
|INTX_ENABLE| PROC
#line 113

 CPSIE I
 BX LR 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |MSR_MSP|
#line 124
|MSR_MSP| PROC
#line 125

 MSR MSP, r0  
 BX r14
	ENDP

;*** End   embedded assembler ***
