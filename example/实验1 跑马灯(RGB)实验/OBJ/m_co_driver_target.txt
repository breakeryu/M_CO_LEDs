; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\m_co_driver_target.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\m_co_driver_target.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\m_co_driver_target.crf ..\App\src\M_CO_driver_target.c]
                          THUMB

                          AREA ||i.M_CO_get_ErrOther||, CODE, READONLY, ALIGN=1

                  M_CO_get_ErrOther PROC
;;;132    /*获取系统其他错误的状态*/
;;;133    extern bool_t __attribute__((weak)) M_CO_get_ErrOther(void)
000000  2000              MOVS     r0,#0
;;;134    {
;;;135        return 0;
;;;136    }
000002  4770              BX       lr
;;;137    //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_ErrPriority1||, CODE, READONLY, ALIGN=1

                  M_CO_get_ErrPriority1 PROC
;;;82     /*获取系统错误1的的状态*/
;;;83     extern bool_t __attribute__((weak)) M_CO_get_ErrPriority1(void)
000000  2000              MOVS     r0,#0
;;;84     {
;;;85         return 0;
;;;86     }
000002  4770              BX       lr
;;;87     //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_ErrPriority3||, CODE, READONLY, ALIGN=1

                  M_CO_get_ErrPriority3 PROC
;;;122    /*获取系统错误3的的状态*/
;;;123    extern bool_t __attribute__((weak)) M_CO_get_ErrPriority3(void)
000000  2000              MOVS     r0,#0
;;;124    {
;;;125        return 0;
;;;126    }
000002  4770              BX       lr
;;;127    //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_ErrPriority4||, CODE, READONLY, ALIGN=1

                  M_CO_get_ErrPriority4 PROC
;;;102    /*获取系统错误4的的状态*/
;;;103    extern bool_t __attribute__((weak)) M_CO_get_ErrPriority4(void)
000000  2000              MOVS     r0,#0
;;;104    {
;;;105        return 0;
;;;106    }
000002  4770              BX       lr
;;;107    //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_ErrPriority5||, CODE, READONLY, ALIGN=1

                  M_CO_get_ErrPriority5 PROC
;;;92     /*获取系统错误5的的状态*/
;;;93     extern bool_t __attribute__((weak)) M_CO_get_ErrPriority5(void)
000000  2000              MOVS     r0,#0
;;;94     {
;;;95         return 0;
;;;96     }
000002  4770              BX       lr
;;;97     //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_ErrPriority6||, CODE, READONLY, ALIGN=1

                  M_CO_get_ErrPriority6 PROC
;;;112    /*获取系统错误6的的状态*/
;;;113    extern bool_t __attribute__((weak)) M_CO_get_ErrPriority6(void)
000000  2000              MOVS     r0,#0
;;;114    {
;;;115        return 0;
;;;116    }
000002  4770              BX       lr
;;;117    //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_SYSconfig||, CODE, READONLY, ALIGN=1

                  M_CO_get_SYSconfig PROC
;;;72     /*获取系统配置的状态*/
;;;73     extern bool_t __attribute__((weak)) M_CO_get_SYSconfig(void)
000000  2000              MOVS     r0,#0
;;;74     {
;;;75         return 0;
;;;76     }
000002  4770              BX       lr
;;;77     //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.M_CO_get_SYSotherState||, CODE, READONLY, ALIGN=1

                  M_CO_get_SYSotherState PROC
;;;142    /*获取系统运行的其他状态*/
;;;143    extern bool_t __attribute__((weak)) M_CO_get_SYSotherState(void)
000000  2000              MOVS     r0,#0
;;;144    {
;;;145        return 0;
;;;146    }
000002  4770              BX       lr
;;;147    //如果需要在应用中实现具体内容
                          ENDP


                          AREA ||i.debug_LEDs_System_Init||, CODE, READONLY, ALIGN=2

                  debug_LEDs_System_Init PROC
;;;17     
;;;18     void debug_LEDs_System_Init(void)
000000  4806              LDR      r0,|L9.28|
;;;19     {
000002  b510              PUSH     {r4,lr}
;;;20     
;;;21         M_CO_LEDs_init(mLEDs);
000004  6800              LDR      r0,[r0,#0]  ; mLEDs
000006  f7fffffe          BL       M_CO_LEDs_init
;;;22         debugLEDsVSInitAll();
00000a  f7fffffe          BL       debugLEDsVSInitAll
;;;23         mEventNo = eDebugLedsSetupDone;
00000e  4904              LDR      r1,|L9.32|
000010  2001              MOVS     r0,#1
000012  7008              STRB     r0,[r1,#0]
;;;24         debugLEDsVSDeduct(mEventNo);
000014  e8bd4010          POP      {r4,lr}
000018  f7ffbffe          B.W      debugLEDsVSDeduct
;;;25     
;;;26     }
;;;27     
                          ENDP

                  |L9.28|
                          DCD      mLEDs
                  |L9.32|
                          DCD      ||.data||

                          AREA ||i.debug_LEDs_System_Run||, CODE, READONLY, ALIGN=2

                  debug_LEDs_System_Run PROC
;;;30     
;;;31     void debug_LEDs_System_Run(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;32     {
000004  b087              SUB      sp,sp,#0x1c
;;;33         M_CO_LEDs_process(mLEDs,
000006  f7fffffe          BL       M_CO_get_SYSotherState
00000a  9000              STR      r0,[sp,#0]
00000c  f7fffffe          BL       M_CO_get_ErrOther
000010  4683              MOV      r11,r0
000012  f7fffffe          BL       M_CO_get_ErrPriority5
000016  4682              MOV      r10,r0
000018  f7fffffe          BL       M_CO_get_ErrPriority4
00001c  4681              MOV      r9,r0
00001e  f7fffffe          BL       M_CO_get_ErrPriority3
000022  4680              MOV      r8,r0
000024  f7fffffe          BL       M_CO_get_ErrPriority6
000028  4607              MOV      r7,r0
00002a  f7fffffe          BL       M_CO_get_ErrPriority1
00002e  4606              MOV      r6,r0
000030  f7fffffe          BL       M_CO_get_SYSconfig
000034  4605              MOV      r5,r0
000036  f7fffffe          BL       M_CO_get_SMT_internalState_t
00003a  4604              MOV      r4,r0
00003c  f7fffffe          BL       M_CO_get_Time_Difference_us
000040  4601              MOV      r1,r0
000042  9800              LDR      r0,[sp,#0]
000044  462b              MOV      r3,r5
000046  e9cdb005          STRD     r11,r0,[sp,#0x14]
00004a  e88d07c0          STM      sp,{r6-r10}
00004e  4806              LDR      r0,|L10.104|
000050  4622              MOV      r2,r4
000052  6800              LDR      r0,[r0,#0]  ; mLEDs
000054  f7fffffe          BL       M_CO_LEDs_process
;;;34                          M_CO_get_Time_Difference_us(),
;;;35                          M_CO_get_SMT_internalState_t(),
;;;36                          M_CO_get_SYSconfig(),
;;;37                          M_CO_get_ErrPriority1(),
;;;38                          M_CO_get_ErrPriority6(),
;;;39                          M_CO_get_ErrPriority3(),
;;;40                          M_CO_get_ErrPriority4(),
;;;41                          M_CO_get_ErrPriority5(),
;;;42                          M_CO_get_ErrOther(),
;;;43                          M_CO_get_SYSotherState()
;;;44                          );
;;;45         mEventNo = eLedsProcessDone;
000058  4904              LDR      r1,|L10.108|
00005a  2002              MOVS     r0,#2
00005c  7008              STRB     r0,[r1,#0]
;;;46         debugLEDsVSDeduct(mEventNo);
00005e  b007              ADD      sp,sp,#0x1c
000060  e8bd4ff0          POP      {r4-r11,lr}
000064  f7ffbffe          B.W      debugLEDsVSDeduct
;;;47     }
;;;48     
                          ENDP

                  |L10.104|
                          DCD      mLEDs
                  |L10.108|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  mEventNo
000000  00                DCB      0x00
