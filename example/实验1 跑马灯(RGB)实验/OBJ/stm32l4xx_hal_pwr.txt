; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32l4xx_hal_pwr.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32l4xx_hal_pwr.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\stm32l4xx_hal_pwr.crf ..\HALLIB\STM32L4xx_HAL_Driver\Src\stm32l4xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;327      */
;;;328    HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  b530              PUSH     {r4,r5,lr}
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;332      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;333    
;;;334      /* Set PLS bits according to PVDLevel value */
;;;335      MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
000002  491d              LDR      r1,|L1.120|
000004  684a              LDR      r2,[r1,#4]
000006  6803              LDR      r3,[r0,#0]
000008  f022020e          BIC      r2,r2,#0xe
00000c  431a              ORRS     r2,r2,r3
00000e  604a              STR      r2,[r1,#4]
;;;336    
;;;337      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;338      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4b1a              LDR      r3,|L1.124|
000012  6819              LDR      r1,[r3,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  6019              STR      r1,[r3,#0]
;;;339      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001a  1f1a              SUBS     r2,r3,#4
00001c  6811              LDR      r1,[r2,#0]
00001e  f4213180          BIC      r1,r1,#0x10000
000022  6011              STR      r1,[r2,#0]
;;;340      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
000024  4c15              LDR      r4,|L1.124|
000026  3408              ADDS     r4,r4,#8
000028  6821              LDR      r1,[r4,#0]
00002a  f4213180          BIC      r1,r1,#0x10000
00002e  6021              STR      r1,[r4,#0]
;;;341      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000030  1d19              ADDS     r1,r3,#4
000032  680d              LDR      r5,[r1,#0]
000034  f4253580          BIC      r5,r5,#0x10000
000038  600d              STR      r5,[r1,#0]
;;;342    
;;;343      /* Configure interrupt mode */
;;;344      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
00003a  6845              LDR      r5,[r0,#4]
00003c  03ed              LSLS     r5,r5,#15
00003e  d503              BPL      |L1.72|
;;;345      {
;;;346        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000040  6815              LDR      r5,[r2,#0]
000042  f4453580          ORR      r5,r5,#0x10000
000046  6015              STR      r5,[r2,#0]
                  |L1.72|
;;;347      }
;;;348    
;;;349      /* Configure event mode */
;;;350      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000048  6842              LDR      r2,[r0,#4]
00004a  0392              LSLS     r2,r2,#14
00004c  d503              BPL      |L1.86|
;;;351      {
;;;352        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00004e  681a              LDR      r2,[r3,#0]
000050  f4423280          ORR      r2,r2,#0x10000
000054  601a              STR      r2,[r3,#0]
                  |L1.86|
;;;353      }
;;;354    
;;;355      /* Configure the edge */
;;;356      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000056  7902              LDRB     r2,[r0,#4]
000058  07d2              LSLS     r2,r2,#31
00005a  d003              BEQ      |L1.100|
;;;357      {
;;;358        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00005c  680a              LDR      r2,[r1,#0]
00005e  f4423280          ORR      r2,r2,#0x10000
000062  600a              STR      r2,[r1,#0]
                  |L1.100|
;;;359      }
;;;360    
;;;361      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000064  7900              LDRB     r0,[r0,#4]
000066  0780              LSLS     r0,r0,#30
000068  d503              BPL      |L1.114|
;;;362      {
;;;363        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00006a  6820              LDR      r0,[r4,#0]
00006c  f4403080          ORR      r0,r0,#0x10000
000070  6020              STR      r0,[r4,#0]
                  |L1.114|
;;;364      }
;;;365    
;;;366      return HAL_OK;
000072  2000              MOVS     r0,#0
;;;367    }
000074  bd30              POP      {r4,r5,pc}
;;;368    
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      0x40007000
                  |L1.124|
                          DCD      0x40010404

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;102      */
;;;103    void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;104    {
;;;105      __HAL_RCC_PWR_FORCE_RESET();
000002  6b81              LDR      r1,[r0,#0x38]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6381              STR      r1,[r0,#0x38]
;;;106      __HAL_RCC_PWR_RELEASE_RESET();
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6381              STR      r1,[r0,#0x38]
;;;107    }
000012  4770              BX       lr
;;;108    
                          ENDP

                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;130      */
;;;131    void HAL_PWR_DisableBkUpAccess(void)
000000  4802              LDR      r0,|L3.12|
;;;132    {
;;;133      CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
000002  6801              LDR      r1,[r0,#0]
000004  f4217180          BIC      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;134    }
00000a  4770              BX       lr
;;;135    
                          ENDP

                  |L3.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;382      */
;;;383    void HAL_PWR_DisablePVD(void)
000000  4802              LDR      r0,|L4.12|
;;;384    {
;;;385      CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
000002  6841              LDR      r1,[r0,#4]
000004  f0210101          BIC      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;386    }
00000a  4770              BX       lr
;;;387    
                          ENDP

                  |L4.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;638      */
;;;639    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;640    {
;;;641      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;642      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;643    }
00000a  4770              BX       lr
;;;644    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;611      */
;;;612    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;613    {
;;;614      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;615      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;616    }
00000a  4770              BX       lr
;;;617    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;428      */
;;;429    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4903              LDR      r1,|L7.16|
;;;430    {
;;;431      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;432    
;;;433      CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
000002  688a              LDR      r2,[r1,#8]
000004  f000001f          AND      r0,r0,#0x1f
000008  4382              BICS     r2,r2,r0
00000a  608a              STR      r2,[r1,#8]
;;;434    }
00000c  4770              BX       lr
;;;435    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;120      */
;;;121    void HAL_PWR_EnableBkUpAccess(void)
000000  4802              LDR      r0,|L8.12|
;;;122    {
;;;123      SET_BIT(PWR->CR1, PWR_CR1_DBP);
000002  6801              LDR      r1,[r0,#0]
000004  f4417180          ORR      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;124    }
00000a  4770              BX       lr
;;;125    
                          ENDP

                  |L8.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;373      */
;;;374    void HAL_PWR_EnablePVD(void)
000000  4802              LDR      r0,|L9.12|
;;;375    {
;;;376      SET_BIT(PWR->CR2, PWR_CR2_PVDE);
000002  6841              LDR      r1,[r0,#4]
000004  f0410101          ORR      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;377    }
00000a  4770              BX       lr
;;;378    
                          ENDP

                  |L9.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;625      */
;;;626    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;627    {
;;;628      /* Set SEVONPEND bit of Cortex System Control Register */
;;;629      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;630    }
00000a  4770              BX       lr
;;;631    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;598      */
;;;599    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;600    {
;;;601      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;602      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;603    }
00000a  4770              BX       lr
;;;604    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;407      */
;;;408    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
000000  4a05              LDR      r2,|L12.24|
;;;409    {
;;;410      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
;;;411    
;;;412      /* Specifies the Wake-Up pin polarity for the event detection
;;;413        (rising or falling edge) */
;;;414      MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
000002  68d3              LDR      r3,[r2,#0xc]
000004  f000011f          AND      r1,r0,#0x1f
000008  438b              BICS     r3,r3,r1
00000a  ea431050          ORR      r0,r3,r0,LSR #5
00000e  60d0              STR      r0,[r2,#0xc]
;;;415    
;;;416      /* Enable wake-up pin */
;;;417      SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
000010  6890              LDR      r0,[r2,#8]
000012  4308              ORRS     r0,r0,r1
000014  6090              STR      r0,[r2,#8]
;;;418    
;;;419    
;;;420    }
000016  4770              BX       lr
;;;421    
                          ENDP

                  |L12.24|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;460      */
;;;461    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4a0f              LDR      r2,|L13.64|
;;;462    {
000002  b510              PUSH     {r4,lr}
;;;463      /* Check the parameters */
;;;464      assert_param(IS_PWR_REGULATOR(Regulator));
;;;465      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;466    
;;;467      /* Set Regulator parameter */
;;;468      if (Regulator == PWR_MAINREGULATOR_ON)
000004  2800              CMP      r0,#0
;;;469      {
;;;470        /* If in low-power run mode at this point, exit it */
;;;471        if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
;;;472        {
;;;473          if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
;;;474          {
;;;475            return ;
;;;476          }
;;;477        }
;;;478        /* Regulator now in main mode. */
;;;479      }
;;;480      else
;;;481      {
;;;482        /* If in run mode, first move to low-power run mode.
;;;483           The system clock frequency must be below 2 MHz at this point. */
;;;484        if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
000006  6950              LDR      r0,[r2,#0x14]
000008  460c              MOV      r4,r1                 ;462
00000a  d00f              BEQ      |L13.44|
00000c  43c0              MVNS     r0,r0
00000e  0580              LSLS     r0,r0,#22
000010  d501              BPL      |L13.22|
;;;485        {
;;;486          HAL_PWREx_EnableLowPowerRunMode();
000012  f7fffffe          BL       HAL_PWREx_EnableLowPowerRunMode
                  |L13.22|
;;;487        }
;;;488      }
;;;489    
;;;490      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;491      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000016  480b              LDR      r0,|L13.68|
000018  6801              LDR      r1,[r0,#0]
00001a  f0210104          BIC      r1,r1,#4
00001e  6001              STR      r1,[r0,#0]
;;;492    
;;;493      /* Select SLEEP mode entry -------------------------------------------------*/
;;;494      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
000020  2c01              CMP      r4,#1
000022  d00a              BEQ      |L13.58|
;;;495      {
;;;496        /* Request Wait For Interrupt */
;;;497        __WFI();
;;;498      }
;;;499      else
;;;500      {
;;;501        /* Request Wait For Event */
;;;502        __SEV();
000024  bf40              SEV      
;;;503        __WFE();
000026  bf20              WFE      
;;;504        __WFE();
000028  bf20              WFE      
                  |L13.42|
;;;505      }
;;;506    
;;;507    }
00002a  bd10              POP      {r4,pc}
                  |L13.44|
00002c  0580              LSLS     r0,r0,#22             ;471
00002e  d5f2              BPL      |L13.22|
000030  f7fffffe          BL       HAL_PWREx_DisableLowPowerRunMode
000034  2800              CMP      r0,#0                 ;473
000036  d1f8              BNE      |L13.42|
000038  e7ed              B        |L13.22|
                  |L13.58|
00003a  bf30              WFI                            ;497
00003c  bd10              POP      {r4,pc}
;;;508    
                          ENDP

00003e  0000              DCW      0x0000
                  |L13.64|
                          DCD      0x40007000
                  |L13.68|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;572      */
;;;573    void HAL_PWR_EnterSTANDBYMode(void)
000000  4806              LDR      r0,|L14.28|
;;;574    {
;;;575      /* Set Stand-by mode */
;;;576      MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
000002  6801              LDR      r1,[r0,#0]
000004  f0210107          BIC      r1,r1,#7
000008  1cc9              ADDS     r1,r1,#3
00000a  6001              STR      r1,[r0,#0]
;;;577    
;;;578      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;579      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4804              LDR      r0,|L14.32|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410104          ORR      r1,r1,#4
000014  6001              STR      r1,[r0,#0]
;;;580    
;;;581    /* This option is used to ensure that store operations are completed */
;;;582    #if defined ( __CC_ARM)
;;;583      __force_stores();
;;;584    #endif
;;;585      /* Request Wait For Interrupt */
;;;586      __WFI();
000016  bf30              WFI      
;;;587    }
000018  4770              BX       lr
;;;588    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40007000
                  |L14.32|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=1

                  HAL_PWR_EnterSTOPMode PROC
;;;539      */
;;;540    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  f5b04f80          CMP      r0,#0x4000
;;;541    {
;;;542      /* Check the parameters */
;;;543      assert_param(IS_PWR_REGULATOR(Regulator));
;;;544    
;;;545      if(Regulator == PWR_LOWPOWERREGULATOR_ON)
;;;546      {
;;;547        HAL_PWREx_EnterSTOP1Mode(STOPEntry);
;;;548      }
;;;549      else
;;;550      {
;;;551        HAL_PWREx_EnterSTOP0Mode(STOPEntry);
000004  4608              MOV      r0,r1
000006  d001              BEQ      |L15.12|
000008  f7ffbffe          B.W      HAL_PWREx_EnterSTOP0Mode
                  |L15.12|
00000c  f7ffbffe          B.W      HAL_PWREx_EnterSTOP1Mode
;;;552      }
;;;553    }
;;;554    
                          ENDP


                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;652      */
;;;653    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;654    {
;;;655      /* NOTE : This function should not be modified; when the callback is needed,
;;;656                the HAL_PWR_PVDCallback can be implemented in the user file
;;;657       */
;;;658    }
;;;659    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32L4xx_HAL_Driver\\Src\\stm32l4xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REVSH|
#line 402
|__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____RRX|
#line 587
|__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
