; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32l4xx_hal_pwr_ex.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32l4xx_hal_pwr_ex.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\stm32l4xx_hal_pwr_ex.crf ..\HALLIB\STM32L4xx_HAL_Driver\Src\stm32l4xx_hal_pwr_ex.c]
                          THUMB

                          AREA ||i.HAL_PWREx_ConfigPVM||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_ConfigPVM PROC
;;;953      */
;;;954    HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM)
000000  b570              PUSH     {r4-r6,lr}
;;;955    {
;;;956      HAL_StatusTypeDef status = HAL_OK;
;;;957    
;;;958      /* Check the parameters */
;;;959      assert_param(IS_PWR_PVM_TYPE(sConfigPVM->PVMType));
;;;960      assert_param(IS_PWR_PVM_MODE(sConfigPVM->Mode));
;;;961    
;;;962    
;;;963      /* Configure EXTI 35 to 38 interrupts if so required:
;;;964         scan thru PVMType to detect which PVMx is set and
;;;965         configure the corresponding EXTI line accordingly. */
;;;966      switch (sConfigPVM->PVMType)
;;;967      {
;;;968    #if defined(PWR_CR2_PVME1)
;;;969        case PWR_PVM_1:
;;;970          /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;971          __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
000002  4b62              LDR      r3,|L1.396|
;;;972          __HAL_PWR_PVM1_EXTI_DISABLE_IT();
;;;973          __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
000004  4c61              LDR      r4,|L1.396|
000006  6801              LDR      r1,[r0,#0]            ;966
000008  2200              MOVS     r2,#0                 ;956
00000a  1f1e              SUBS     r6,r3,#4              ;972
00000c  3408              ADDS     r4,r4,#8
;;;974          __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
00000e  1d1d              ADDS     r5,r3,#4
000010  2910              CMP      r1,#0x10              ;966
000012  d008              BEQ      |L1.38|
000014  2920              CMP      r1,#0x20              ;966
000016  d032              BEQ      |L1.126|
000018  2940              CMP      r1,#0x40              ;966
00001a  d05c              BEQ      |L1.214|
00001c  2980              CMP      r1,#0x80              ;966
00001e  d07d              BEQ      |L1.284|
;;;975    
;;;976          /* Configure interrupt mode */
;;;977          if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
;;;978          {
;;;979            __HAL_PWR_PVM1_EXTI_ENABLE_IT();
;;;980          }
;;;981    
;;;982          /* Configure event mode */
;;;983          if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
;;;984          {
;;;985            __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
;;;986          }
;;;987    
;;;988          /* Configure the edge */
;;;989          if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
;;;990          {
;;;991            __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
;;;992          }
;;;993    
;;;994          if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
;;;995          {
;;;996            __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
;;;997          }
;;;998          break;
;;;999    #endif /* PWR_CR2_PVME1 */
;;;1000   
;;;1001   #if defined(PWR_CR2_PVME2)
;;;1002       case PWR_PVM_2:
;;;1003         /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;1004         __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
;;;1005         __HAL_PWR_PVM2_EXTI_DISABLE_IT();
;;;1006         __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
;;;1007         __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
;;;1008   
;;;1009         /* Configure interrupt mode */
;;;1010         if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
;;;1011         {
;;;1012           __HAL_PWR_PVM2_EXTI_ENABLE_IT();
;;;1013         }
;;;1014   
;;;1015         /* Configure event mode */
;;;1016         if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
;;;1017         {
;;;1018           __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
;;;1019         }
;;;1020   
;;;1021         /* Configure the edge */
;;;1022         if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
;;;1023         {
;;;1024           __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
;;;1025         }
;;;1026   
;;;1027         if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
;;;1028         {
;;;1029           __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
;;;1030         }
;;;1031         break;
;;;1032   #endif /* PWR_CR2_PVME2 */
;;;1033   
;;;1034       case PWR_PVM_3:
;;;1035         /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;1036         __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
;;;1037         __HAL_PWR_PVM3_EXTI_DISABLE_IT();
;;;1038         __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
;;;1039         __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
;;;1040   
;;;1041         /* Configure interrupt mode */
;;;1042         if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
;;;1043         {
;;;1044           __HAL_PWR_PVM3_EXTI_ENABLE_IT();
;;;1045         }
;;;1046   
;;;1047         /* Configure event mode */
;;;1048         if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
;;;1049         {
;;;1050           __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
;;;1051         }
;;;1052   
;;;1053         /* Configure the edge */
;;;1054         if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
;;;1055         {
;;;1056           __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
;;;1057         }
;;;1058   
;;;1059         if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
;;;1060         {
;;;1061           __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
;;;1062         }
;;;1063         break;
;;;1064   
;;;1065       case PWR_PVM_4:
;;;1066         /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;1067         __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
;;;1068         __HAL_PWR_PVM4_EXTI_DISABLE_IT();
;;;1069         __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
;;;1070         __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
;;;1071   
;;;1072         /* Configure interrupt mode */
;;;1073         if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
;;;1074         {
;;;1075           __HAL_PWR_PVM4_EXTI_ENABLE_IT();
;;;1076         }
;;;1077   
;;;1078         /* Configure event mode */
;;;1079         if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
;;;1080         {
;;;1081           __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
;;;1082         }
;;;1083   
;;;1084         /* Configure the edge */
;;;1085         if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
;;;1086         {
;;;1087           __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
;;;1088         }
;;;1089   
;;;1090         if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
;;;1091         {
;;;1092           __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
;;;1093         }
;;;1094         break;
;;;1095   
;;;1096       default:
;;;1097         status = HAL_ERROR;
000020  2201              MOVS     r2,#1
                  |L1.34|
;;;1098         break;
;;;1099     }
;;;1100   
;;;1101     return status;
000022  4610              MOV      r0,r2
;;;1102   }
000024  bd70              POP      {r4-r6,pc}
                  |L1.38|
000026  6819              LDR      r1,[r3,#0]            ;971
000028  f0210108          BIC      r1,r1,#8              ;971
00002c  6019              STR      r1,[r3,#0]            ;971
00002e  6831              LDR      r1,[r6,#0]            ;972
000030  f0210108          BIC      r1,r1,#8              ;972
000034  6031              STR      r1,[r6,#0]            ;972
000036  6821              LDR      r1,[r4,#0]            ;973
000038  f0210108          BIC      r1,r1,#8              ;973
00003c  6021              STR      r1,[r4,#0]            ;973
00003e  6829              LDR      r1,[r5,#0]            ;974
000040  f0210108          BIC      r1,r1,#8              ;974
000044  6029              STR      r1,[r5,#0]            ;974
000046  6841              LDR      r1,[r0,#4]            ;977
000048  03c9              LSLS     r1,r1,#15             ;977
00004a  d503              BPL      |L1.84|
00004c  6831              LDR      r1,[r6,#0]            ;979
00004e  f0410108          ORR      r1,r1,#8              ;979
000052  6031              STR      r1,[r6,#0]            ;979
                  |L1.84|
000054  6841              LDR      r1,[r0,#4]            ;983
000056  0389              LSLS     r1,r1,#14             ;983
000058  d503              BPL      |L1.98|
00005a  6819              LDR      r1,[r3,#0]            ;985
00005c  f0410108          ORR      r1,r1,#8              ;985
000060  6019              STR      r1,[r3,#0]            ;985
                  |L1.98|
000062  7901              LDRB     r1,[r0,#4]            ;989
000064  07c9              LSLS     r1,r1,#31             ;989
000066  d003              BEQ      |L1.112|
000068  6829              LDR      r1,[r5,#0]            ;991
00006a  f0410108          ORR      r1,r1,#8              ;991
00006e  6029              STR      r1,[r5,#0]            ;991
                  |L1.112|
000070  7900              LDRB     r0,[r0,#4]            ;994
000072  0780              LSLS     r0,r0,#30             ;994
                  |L1.116|
000074  d5d5              BPL      |L1.34|
000076  6820              LDR      r0,[r4,#0]            ;996
000078  f0400008          ORR      r0,r0,#8              ;996
00007c  e084              B        |L1.392|
                  |L1.126|
00007e  6819              LDR      r1,[r3,#0]            ;1004
000080  f0210110          BIC      r1,r1,#0x10           ;1004
000084  6019              STR      r1,[r3,#0]            ;1004
000086  6831              LDR      r1,[r6,#0]            ;1005
000088  f0210110          BIC      r1,r1,#0x10           ;1005
00008c  6031              STR      r1,[r6,#0]            ;1005
00008e  6821              LDR      r1,[r4,#0]            ;1006
000090  f0210110          BIC      r1,r1,#0x10           ;1006
000094  6021              STR      r1,[r4,#0]            ;1006
000096  6829              LDR      r1,[r5,#0]            ;1007
000098  f0210110          BIC      r1,r1,#0x10           ;1007
00009c  6029              STR      r1,[r5,#0]            ;1007
00009e  6841              LDR      r1,[r0,#4]            ;1010
0000a0  03c9              LSLS     r1,r1,#15             ;1010
0000a2  d503              BPL      |L1.172|
0000a4  6831              LDR      r1,[r6,#0]            ;1012
0000a6  f0410110          ORR      r1,r1,#0x10           ;1012
0000aa  6031              STR      r1,[r6,#0]            ;1012
                  |L1.172|
0000ac  6841              LDR      r1,[r0,#4]            ;1016
0000ae  0389              LSLS     r1,r1,#14             ;1016
0000b0  d503              BPL      |L1.186|
0000b2  6819              LDR      r1,[r3,#0]            ;1018
0000b4  f0410110          ORR      r1,r1,#0x10           ;1018
0000b8  6019              STR      r1,[r3,#0]            ;1018
                  |L1.186|
0000ba  7901              LDRB     r1,[r0,#4]            ;1022
0000bc  07c9              LSLS     r1,r1,#31             ;1022
0000be  d003              BEQ      |L1.200|
0000c0  6829              LDR      r1,[r5,#0]            ;1024
0000c2  f0410110          ORR      r1,r1,#0x10           ;1024
0000c6  6029              STR      r1,[r5,#0]            ;1024
                  |L1.200|
0000c8  7900              LDRB     r0,[r0,#4]            ;1027
0000ca  0780              LSLS     r0,r0,#30             ;1027
                  |L1.204|
0000cc  d5a9              BPL      |L1.34|
0000ce  6820              LDR      r0,[r4,#0]            ;1029
0000d0  f0400010          ORR      r0,r0,#0x10           ;1029
0000d4  e058              B        |L1.392|
                  |L1.214|
0000d6  6819              LDR      r1,[r3,#0]            ;1036
0000d8  f0210120          BIC      r1,r1,#0x20           ;1036
0000dc  6019              STR      r1,[r3,#0]            ;1036
0000de  6831              LDR      r1,[r6,#0]            ;1037
0000e0  f0210120          BIC      r1,r1,#0x20           ;1037
0000e4  6031              STR      r1,[r6,#0]            ;1037
0000e6  6821              LDR      r1,[r4,#0]            ;1038
0000e8  f0210120          BIC      r1,r1,#0x20           ;1038
0000ec  6021              STR      r1,[r4,#0]            ;1038
0000ee  6829              LDR      r1,[r5,#0]            ;1039
0000f0  f0210120          BIC      r1,r1,#0x20           ;1039
0000f4  6029              STR      r1,[r5,#0]            ;1039
0000f6  6841              LDR      r1,[r0,#4]            ;1042
0000f8  03c9              LSLS     r1,r1,#15             ;1042
0000fa  d503              BPL      |L1.260|
0000fc  6831              LDR      r1,[r6,#0]            ;1044
0000fe  f0410120          ORR      r1,r1,#0x20           ;1044
000102  6031              STR      r1,[r6,#0]            ;1044
                  |L1.260|
000104  6841              LDR      r1,[r0,#4]            ;1048
000106  0389              LSLS     r1,r1,#14             ;1048
000108  d503              BPL      |L1.274|
00010a  6819              LDR      r1,[r3,#0]            ;1050
00010c  f0410120          ORR      r1,r1,#0x20           ;1050
000110  6019              STR      r1,[r3,#0]            ;1050
                  |L1.274|
000112  7901              LDRB     r1,[r0,#4]            ;1054
000114  07c9              LSLS     r1,r1,#31             ;1054
000116  d005              BEQ      |L1.292|
000118  6829              LDR      r1,[r5,#0]            ;1056
00011a  e000              B        |L1.286|
                  |L1.284|
00011c  e009              B        |L1.306|
                  |L1.286|
00011e  f0410120          ORR      r1,r1,#0x20           ;1056
000122  6029              STR      r1,[r5,#0]            ;1056
                  |L1.292|
000124  7900              LDRB     r0,[r0,#4]            ;1059
000126  0780              LSLS     r0,r0,#30             ;1059
000128  d5a4              BPL      |L1.116|
00012a  6820              LDR      r0,[r4,#0]            ;1061
00012c  f0400020          ORR      r0,r0,#0x20           ;1061
000130  e02a              B        |L1.392|
                  |L1.306|
000132  6819              LDR      r1,[r3,#0]            ;1067
000134  f0210140          BIC      r1,r1,#0x40           ;1067
000138  6019              STR      r1,[r3,#0]            ;1067
00013a  6831              LDR      r1,[r6,#0]            ;1068
00013c  f0210140          BIC      r1,r1,#0x40           ;1068
000140  6031              STR      r1,[r6,#0]            ;1068
000142  6821              LDR      r1,[r4,#0]            ;1069
000144  f0210140          BIC      r1,r1,#0x40           ;1069
000148  6021              STR      r1,[r4,#0]            ;1069
00014a  6829              LDR      r1,[r5,#0]            ;1070
00014c  f0210140          BIC      r1,r1,#0x40           ;1070
000150  6029              STR      r1,[r5,#0]            ;1070
000152  6841              LDR      r1,[r0,#4]            ;1073
000154  03c9              LSLS     r1,r1,#15             ;1073
000156  d503              BPL      |L1.352|
000158  6831              LDR      r1,[r6,#0]            ;1075
00015a  f0410140          ORR      r1,r1,#0x40           ;1075
00015e  6031              STR      r1,[r6,#0]            ;1075
                  |L1.352|
000160  6841              LDR      r1,[r0,#4]            ;1079
000162  0389              LSLS     r1,r1,#14             ;1079
000164  d503              BPL      |L1.366|
000166  6819              LDR      r1,[r3,#0]            ;1081
000168  f0410140          ORR      r1,r1,#0x40           ;1081
00016c  6019              STR      r1,[r3,#0]            ;1081
                  |L1.366|
00016e  7901              LDRB     r1,[r0,#4]            ;1085
000170  07c9              LSLS     r1,r1,#31             ;1085
000172  d003              BEQ      |L1.380|
000174  6829              LDR      r1,[r5,#0]            ;1087
000176  f0410140          ORR      r1,r1,#0x40           ;1087
00017a  6029              STR      r1,[r5,#0]            ;1087
                  |L1.380|
00017c  7900              LDRB     r0,[r0,#4]            ;1090
00017e  0780              LSLS     r0,r0,#30             ;1090
000180  d5a4              BPL      |L1.204|
000182  6820              LDR      r0,[r4,#0]            ;1092
000184  f0400040          ORR      r0,r0,#0x40           ;1092
                  |L1.392|
000188  6020              STR      r0,[r4,#0]            ;1092
00018a  e74a              B        |L1.34|
;;;1103   
                          ENDP

                  |L1.396|
                          DCD      0x40010424

                          AREA ||i.HAL_PWREx_ControlVoltageScaling||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_ControlVoltageScaling PROC
;;;179      */
;;;180    HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
000000  4916              LDR      r1,|L2.92|
;;;181    {
;;;182      uint32_t wait_loop_index;
;;;183    
;;;184      assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
;;;185    
;;;186    #if defined(PWR_CR5_R1MODE)
;;;187      if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
;;;188      {
;;;189        /* If current range is range 2 */
;;;190        if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
;;;191        {
;;;192          /* Make sure Range 1 Boost is enabled */
;;;193          CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
;;;194    
;;;195          /* Set Range 1 */
;;;196          MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
;;;197    
;;;198          /* Wait until VOSF is cleared */
;;;199          wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
;;;200          while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
;;;201          {
;;;202            wait_loop_index--;
;;;203          }
;;;204          if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
;;;205          {
;;;206            return HAL_TIMEOUT;
;;;207          }
;;;208        }
;;;209        /* If current range is range 1 normal or boost mode */
;;;210        else
;;;211        {
;;;212          /* Enable Range 1 Boost (no issue if bit already reset) */
;;;213          CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
;;;214        }
;;;215      }
;;;216      else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
;;;217      {
;;;218        /* If current range is range 2 */
;;;219        if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
;;;220        {
;;;221          /* Make sure Range 1 Boost is disabled */
;;;222          SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
;;;223    
;;;224          /* Set Range 1 */
;;;225          MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
;;;226    
;;;227          /* Wait until VOSF is cleared */
;;;228          wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
;;;229          while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
;;;230          {
;;;231            wait_loop_index--;
;;;232          }
;;;233          if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
;;;234          {
;;;235            return HAL_TIMEOUT;
;;;236          }
;;;237        }
;;;238         /* If current range is range 1 normal or boost mode */
;;;239        else
;;;240        {
;;;241          /* Disable Range 1 Boost (no issue if bit already set) */
;;;242          SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
;;;243        }
;;;244      }
;;;245      else
;;;246      {
;;;247        /* Set Range 2 */
;;;248        MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
;;;249        /* No need to wait for VOSF to be cleared for this transition */
;;;250        /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
;;;251      }
;;;252    
;;;253    #else
;;;254    
;;;255      /* If Set Range 1 */
;;;256      if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
000002  f5b07f00          CMP      r0,#0x200
;;;257      {
;;;258        if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
;;;259        {
;;;260          /* Set Range 1 */
;;;261          MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
;;;262    
;;;263          /* Wait until VOSF is cleared */
;;;264          wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
;;;265          while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
;;;266          {
;;;267            wait_loop_index--;
;;;268          }
;;;269          if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
;;;270          {
;;;271            return HAL_TIMEOUT;
;;;272          }
;;;273        }
;;;274      }
;;;275      else
;;;276      {
;;;277        if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
000006  6808              LDR      r0,[r1,#0]
000008  f3c02041          UBFX     r0,r0,#9,#2
00000c  d009              BEQ      |L2.34|
00000e  2802              CMP      r0,#2
000010  d005              BEQ      |L2.30|
;;;278        {
;;;279          /* Set Range 2 */
;;;280          MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
000012  6808              LDR      r0,[r1,#0]
000014  f42060c0          BIC      r0,r0,#0x600
000018  f4406080          ORR      r0,r0,#0x400
00001c  6008              STR      r0,[r1,#0]
                  |L2.30|
;;;281          /* No need to wait for VOSF to be cleared for this transition */
;;;282        }
;;;283      }
;;;284    #endif
;;;285    
;;;286      return HAL_OK;
00001e  2000              MOVS     r0,#0
;;;287    }
000020  4770              BX       lr
                  |L2.34|
000022  2801              CMP      r0,#1                 ;258
000024  d0fb              BEQ      |L2.30|
000026  6808              LDR      r0,[r1,#0]            ;261
000028  f42060c0          BIC      r0,r0,#0x600          ;261
00002c  f4407000          ORR      r0,r0,#0x200          ;261
000030  6008              STR      r0,[r1,#0]            ;261
000032  480b              LDR      r0,|L2.96|
000034  2232              MOVS     r2,#0x32              ;264
000036  6800              LDR      r0,[r0,#0]            ;264  ; SystemCoreClock
000038  4350              MULS     r0,r2,r0              ;264
00003a  4a0a              LDR      r2,|L2.100|
00003c  fbb0f0f2          UDIV     r0,r0,r2              ;264
000040  1c40              ADDS     r0,r0,#1              ;264
000042  e000              B        |L2.70|
                  |L2.68|
000044  1e40              SUBS     r0,r0,#1              ;265
                  |L2.70|
000046  694a              LDR      r2,[r1,#0x14]         ;265
000048  0552              LSLS     r2,r2,#21             ;265
00004a  d501              BPL      |L2.80|
00004c  2800              CMP      r0,#0                 ;265
00004e  d1f9              BNE      |L2.68|
                  |L2.80|
000050  6948              LDR      r0,[r1,#0x14]         ;269
000052  0540              LSLS     r0,r0,#21             ;269
000054  d5e3              BPL      |L2.30|
000056  2003              MOVS     r0,#3                 ;271
000058  4770              BX       lr
;;;288    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      0x40007000
                  |L2.96|
                          DCD      SystemCoreClock
                  |L2.100|
                          DCD      0x000f4240

                          AREA ||i.HAL_PWREx_DisableBatteryCharging||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableBatteryCharging PROC
;;;314      */
;;;315    void HAL_PWREx_DisableBatteryCharging(void)
000000  4802              LDR      r0,|L3.12|
;;;316    {
;;;317      CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
000002  68c1              LDR      r1,[r0,#0xc]
000004  f4217180          BIC      r1,r1,#0x100
000008  60c1              STR      r1,[r0,#0xc]
;;;318    }
00000a  4770              BX       lr
;;;319    
                          ENDP

                  |L3.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableGPIOPullDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableGPIOPullDown PROC
;;;650      */
;;;651    HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
000000  4603              MOV      r3,r0
;;;652    {
000002  b510              PUSH     {r4,lr}
;;;653      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;654    
;;;655      assert_param(IS_PWR_GPIO(GPIO));
;;;656      assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
;;;657    
;;;658      switch (GPIO)
;;;659      {
;;;660        case PWR_GPIO_A:
;;;661           CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
000006  4a18              LDR      r2,|L4.104|
000008  2b08              CMP      r3,#8                 ;658
00000a  d22b              BCS      |L4.100|
00000c  e8dff003          TBB      [pc,r3]               ;658
000010  040a1014          DCB      0x04,0x0a,0x10,0x14
000014  181c2024          DCB      0x18,0x1c,0x20,0x24
000018  6a53              LDR      r3,[r2,#0x24]
00001a  f4214120          BIC      r1,r1,#0xa000
00001e  438b              BICS     r3,r3,r1
000020  6253              STR      r3,[r2,#0x24]
;;;662           break;
;;;663        case PWR_GPIO_B:
;;;664           CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
;;;665           break;
;;;666        case PWR_GPIO_C:
;;;667           CLEAR_BIT(PWR->PDCRC, GPIONumber);
;;;668           break;
;;;669    #if defined(GPIOD)
;;;670        case PWR_GPIO_D:
;;;671           CLEAR_BIT(PWR->PDCRD, GPIONumber);
;;;672           break;
;;;673    #endif
;;;674    #if defined(GPIOE)
;;;675        case PWR_GPIO_E:
;;;676           CLEAR_BIT(PWR->PDCRE, GPIONumber);
;;;677           break;
;;;678    #endif
;;;679    #if defined(GPIOF)
;;;680        case PWR_GPIO_F:
;;;681           CLEAR_BIT(PWR->PDCRF, GPIONumber);
;;;682           break;
;;;683    #endif
;;;684    #if defined(GPIOG)
;;;685        case PWR_GPIO_G:
;;;686           CLEAR_BIT(PWR->PDCRG, GPIONumber);
;;;687           break;
;;;688    #endif
;;;689        case PWR_GPIO_H:
;;;690    #if defined (STM32L496xx) || defined (STM32L4A6xx)
;;;691           CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
;;;692    #else
;;;693           CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
;;;694    #endif
;;;695           break;
;;;696    #if defined(GPIOI)
;;;697        case PWR_GPIO_I:
;;;698           CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
;;;699           break;
;;;700    #endif
;;;701        default:
;;;702          status = HAL_ERROR;
;;;703          break;
;;;704      }
;;;705    
;;;706      return status;
;;;707    }
000022  bd10              POP      {r4,pc}
000024  6ad3              LDR      r3,[r2,#0x2c]         ;664
000026  f0210110          BIC      r1,r1,#0x10           ;664
00002a  438b              BICS     r3,r3,r1              ;664
00002c  62d3              STR      r3,[r2,#0x2c]         ;664
00002e  bd10              POP      {r4,pc}
000030  6b53              LDR      r3,[r2,#0x34]         ;667
000032  438b              BICS     r3,r3,r1              ;667
000034  6353              STR      r3,[r2,#0x34]         ;667
000036  bd10              POP      {r4,pc}
000038  6bd3              LDR      r3,[r2,#0x3c]         ;671
00003a  438b              BICS     r3,r3,r1              ;671
00003c  63d3              STR      r3,[r2,#0x3c]         ;671
00003e  bd10              POP      {r4,pc}
000040  6c53              LDR      r3,[r2,#0x44]         ;676
000042  438b              BICS     r3,r3,r1              ;676
000044  6453              STR      r3,[r2,#0x44]         ;676
000046  bd10              POP      {r4,pc}
000048  6cd3              LDR      r3,[r2,#0x4c]         ;681
00004a  438b              BICS     r3,r3,r1              ;681
00004c  64d3              STR      r3,[r2,#0x4c]         ;681
00004e  bd10              POP      {r4,pc}
000050  6d53              LDR      r3,[r2,#0x54]         ;686
000052  438b              BICS     r3,r3,r1              ;686
000054  6553              STR      r3,[r2,#0x54]         ;686
000056  bd10              POP      {r4,pc}
000058  6dd3              LDR      r3,[r2,#0x5c]         ;693
00005a  f0010103          AND      r1,r1,#3              ;693
00005e  438b              BICS     r3,r3,r1              ;693
000060  65d3              STR      r3,[r2,#0x5c]         ;693
000062  bd10              POP      {r4,pc}
                  |L4.100|
000064  2001              MOVS     r0,#1                 ;702
000066  bd10              POP      {r4,pc}
;;;708    
                          ENDP

                  |L4.104|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableGPIOPullUp||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableGPIOPullUp PROC
;;;490      */
;;;491    HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
000000  4603              MOV      r3,r0
;;;492    {
000002  b510              PUSH     {r4,lr}
;;;493      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;494    
;;;495      assert_param(IS_PWR_GPIO(GPIO));
;;;496      assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
;;;497    
;;;498      switch (GPIO)
;;;499      {
;;;500        case PWR_GPIO_A:
;;;501           CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
000006  4a17              LDR      r2,|L5.100|
000008  2b08              CMP      r3,#8                 ;498
00000a  d229              BCS      |L5.96|
00000c  e8dff003          TBB      [pc,r3]               ;498
000010  040a0e12          DCB      0x04,0x0a,0x0e,0x12
000014  161a1e22          DCB      0x16,0x1a,0x1e,0x22
000018  6a13              LDR      r3,[r2,#0x20]
00001a  f4214180          BIC      r1,r1,#0x4000
00001e  438b              BICS     r3,r3,r1
000020  6213              STR      r3,[r2,#0x20]
;;;502           break;
;;;503        case PWR_GPIO_B:
;;;504           CLEAR_BIT(PWR->PUCRB, GPIONumber);
;;;505           break;
;;;506        case PWR_GPIO_C:
;;;507           CLEAR_BIT(PWR->PUCRC, GPIONumber);
;;;508           break;
;;;509    #if defined(GPIOD)
;;;510        case PWR_GPIO_D:
;;;511           CLEAR_BIT(PWR->PUCRD, GPIONumber);
;;;512           break;
;;;513    #endif
;;;514    #if defined(GPIOE)
;;;515        case PWR_GPIO_E:
;;;516           CLEAR_BIT(PWR->PUCRE, GPIONumber);
;;;517           break;
;;;518    #endif
;;;519    #if defined(GPIOF)
;;;520        case PWR_GPIO_F:
;;;521           CLEAR_BIT(PWR->PUCRF, GPIONumber);
;;;522           break;
;;;523    #endif
;;;524    #if defined(GPIOG)
;;;525        case PWR_GPIO_G:
;;;526           CLEAR_BIT(PWR->PUCRG, GPIONumber);
;;;527           break;
;;;528    #endif
;;;529        case PWR_GPIO_H:
;;;530           CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
;;;531           break;
;;;532    #if defined(GPIOI)
;;;533        case PWR_GPIO_I:
;;;534           CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
;;;535           break;
;;;536    #endif
;;;537        default:
;;;538           status = HAL_ERROR;
;;;539           break;
;;;540      }
;;;541    
;;;542      return status;
;;;543    }
000022  bd10              POP      {r4,pc}
000024  6a93              LDR      r3,[r2,#0x28]         ;504
000026  438b              BICS     r3,r3,r1              ;504
000028  6293              STR      r3,[r2,#0x28]         ;504
00002a  bd10              POP      {r4,pc}
00002c  6b13              LDR      r3,[r2,#0x30]         ;507
00002e  438b              BICS     r3,r3,r1              ;507
000030  6313              STR      r3,[r2,#0x30]         ;507
000032  bd10              POP      {r4,pc}
000034  6b93              LDR      r3,[r2,#0x38]         ;511
000036  438b              BICS     r3,r3,r1              ;511
000038  6393              STR      r3,[r2,#0x38]         ;511
00003a  bd10              POP      {r4,pc}
00003c  6c13              LDR      r3,[r2,#0x40]         ;516
00003e  438b              BICS     r3,r3,r1              ;516
000040  6413              STR      r3,[r2,#0x40]         ;516
000042  bd10              POP      {r4,pc}
000044  6c93              LDR      r3,[r2,#0x48]         ;521
000046  438b              BICS     r3,r3,r1              ;521
000048  6493              STR      r3,[r2,#0x48]         ;521
00004a  bd10              POP      {r4,pc}
00004c  6d13              LDR      r3,[r2,#0x50]         ;526
00004e  438b              BICS     r3,r3,r1              ;526
000050  6513              STR      r3,[r2,#0x50]         ;526
000052  bd10              POP      {r4,pc}
000054  6d93              LDR      r3,[r2,#0x58]         ;530
000056  f0010103          AND      r1,r1,#3              ;530
00005a  438b              BICS     r3,r3,r1              ;530
00005c  6593              STR      r3,[r2,#0x58]         ;530
00005e  bd10              POP      {r4,pc}
                  |L5.96|
000060  2001              MOVS     r0,#1                 ;538
000062  bd10              POP      {r4,pc}
;;;544    
                          ENDP

                  |L5.100|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableInternalWakeUpLine||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableInternalWakeUpLine PROC
;;;379      */
;;;380    void HAL_PWREx_DisableInternalWakeUpLine(void)
000000  4802              LDR      r0,|L6.12|
;;;381    {
;;;382      CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
000002  6881              LDR      r1,[r0,#8]
000004  f4214100          BIC      r1,r1,#0x8000
000008  6081              STR      r1,[r0,#8]
;;;383    }
00000a  4770              BX       lr
;;;384    
                          ENDP

                  |L6.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableLowPowerRunMode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableLowPowerRunMode PROC
;;;1130     */
;;;1131   HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
000000  490d              LDR      r1,|L7.56|
;;;1132   {
;;;1133     uint32_t wait_loop_index;
;;;1134   
;;;1135     /* Clear LPR bit */
;;;1136     CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
000002  6808              LDR      r0,[r1,#0]
000004  f4204080          BIC      r0,r0,#0x4000
000008  6008              STR      r0,[r1,#0]
;;;1137   
;;;1138     /* Wait until REGLPF is reset */
;;;1139     wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
00000a  480c              LDR      r0,|L7.60|
00000c  2232              MOVS     r2,#0x32
00000e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000010  4350              MULS     r0,r2,r0
000012  4a0b              LDR      r2,|L7.64|
000014  fbb0f0f2          UDIV     r0,r0,r2
000018  1c40              ADDS     r0,r0,#1
00001a  e000              B        |L7.30|
                  |L7.28|
00001c  1e40              SUBS     r0,r0,#1              ;1132
                  |L7.30|
;;;1140     while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
00001e  694a              LDR      r2,[r1,#0x14]
000020  0592              LSLS     r2,r2,#22
000022  d501              BPL      |L7.40|
000024  2800              CMP      r0,#0
000026  d1f9              BNE      |L7.28|
                  |L7.40|
;;;1141     {
;;;1142       wait_loop_index--;
;;;1143     }
;;;1144     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
000028  6948              LDR      r0,[r1,#0x14]
00002a  0580              LSLS     r0,r0,#22
00002c  d501              BPL      |L7.50|
;;;1145     {
;;;1146       return HAL_TIMEOUT;
00002e  2003              MOVS     r0,#3
;;;1147     }
;;;1148   
;;;1149     return HAL_OK;
;;;1150   }
000030  4770              BX       lr
                  |L7.50|
000032  2000              MOVS     r0,#0                 ;1149
000034  4770              BX       lr
;;;1151   
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      0x40007000
                  |L7.60|
                          DCD      SystemCoreClock
                  |L7.64|
                          DCD      0x000f4240

                          AREA ||i.HAL_PWREx_DisablePVM1||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisablePVM1 PROC
;;;873      */
;;;874    void HAL_PWREx_DisablePVM1(void)
000000  4802              LDR      r0,|L8.12|
;;;875    {
;;;876      CLEAR_BIT(PWR->CR2, PWR_PVM_1);
000002  6841              LDR      r1,[r0,#4]
000004  f0210110          BIC      r1,r1,#0x10
000008  6041              STR      r1,[r0,#4]
;;;877    }
00000a  4770              BX       lr
;;;878    #endif /* PWR_CR2_PVME1 */
                          ENDP

                  |L8.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisablePVM2||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisablePVM2 PROC
;;;894      */
;;;895    void HAL_PWREx_DisablePVM2(void)
000000  4802              LDR      r0,|L9.12|
;;;896    {
;;;897      CLEAR_BIT(PWR->CR2, PWR_PVM_2);
000002  6841              LDR      r1,[r0,#4]
000004  f0210120          BIC      r1,r1,#0x20
000008  6041              STR      r1,[r0,#4]
;;;898    }
00000a  4770              BX       lr
;;;899    #endif /* PWR_CR2_PVME2 */
                          ENDP

                  |L9.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisablePVM3||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisablePVM3 PROC
;;;914      */
;;;915    void HAL_PWREx_DisablePVM3(void)
000000  4802              LDR      r0,|L10.12|
;;;916    {
;;;917      CLEAR_BIT(PWR->CR2, PWR_PVM_3);
000002  6841              LDR      r1,[r0,#4]
000004  f0210140          BIC      r1,r1,#0x40
000008  6041              STR      r1,[r0,#4]
;;;918    }
00000a  4770              BX       lr
;;;919    
                          ENDP

                  |L10.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisablePVM4||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisablePVM4 PROC
;;;933      */
;;;934    void HAL_PWREx_DisablePVM4(void)
000000  4802              LDR      r0,|L11.12|
;;;935    {
;;;936      CLEAR_BIT(PWR->CR2, PWR_PVM_4);
000002  6841              LDR      r1,[r0,#4]
000004  f0210180          BIC      r1,r1,#0x80
000008  6041              STR      r1,[r0,#4]
;;;937    }
00000a  4770              BX       lr
;;;938    
                          ENDP

                  |L11.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisablePullUpPullDownConfig||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisablePullUpPullDownConfig PROC
;;;732      */
;;;733    void HAL_PWREx_DisablePullUpPullDownConfig(void)
000000  4802              LDR      r0,|L12.12|
;;;734    {
;;;735      CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
000002  6881              LDR      r1,[r0,#8]
000004  f4216180          BIC      r1,r1,#0x400
000008  6081              STR      r1,[r0,#8]
;;;736    }
00000a  4770              BX       lr
;;;737    
                          ENDP

                  |L12.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableSRAM2ContentRetention||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableSRAM2ContentRetention PROC
;;;757      */
;;;758    void HAL_PWREx_DisableSRAM2ContentRetention(void)
000000  4802              LDR      r0,|L13.12|
;;;759    {
;;;760      CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
000002  6881              LDR      r1,[r0,#8]
000004  f4217180          BIC      r1,r1,#0x100
000008  6081              STR      r1,[r0,#8]
;;;761    }
00000a  4770              BX       lr
;;;762    
                          ENDP

                  |L13.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableVddIO2||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableVddIO2 PROC
;;;358      */
;;;359    void HAL_PWREx_DisableVddIO2(void)
000000  4802              LDR      r0,|L14.12|
;;;360    {
;;;361      CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
000002  6841              LDR      r1,[r0,#4]
000004  f4217100          BIC      r1,r1,#0x200
000008  6041              STR      r1,[r0,#4]
;;;362    }
00000a  4770              BX       lr
;;;363    #endif /* PWR_CR2_IOSV */
                          ENDP

                  |L14.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_DisableVddUSB||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_DisableVddUSB PROC
;;;336      */
;;;337    void HAL_PWREx_DisableVddUSB(void)
000000  4802              LDR      r0,|L15.12|
;;;338    {
;;;339      CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
000002  6841              LDR      r1,[r0,#4]
000004  f4216180          BIC      r1,r1,#0x400
000008  6041              STR      r1,[r0,#4]
;;;340    }
00000a  4770              BX       lr
;;;341    #endif /* PWR_CR2_USV */
                          ENDP

                  |L15.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableBatteryCharging||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableBatteryCharging PROC
;;;298      */
;;;299    void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
000000  4905              LDR      r1,|L16.24|
;;;300    {
;;;301      assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));
;;;302    
;;;303      /* Specify resistor selection */
;;;304      MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
000002  68ca              LDR      r2,[r1,#0xc]
000004  f4227200          BIC      r2,r2,#0x200
000008  4302              ORRS     r2,r2,r0
00000a  60ca              STR      r2,[r1,#0xc]
;;;305    
;;;306      /* Enable battery charging */
;;;307      SET_BIT(PWR->CR4, PWR_CR4_VBE);
00000c  68c8              LDR      r0,[r1,#0xc]
00000e  f4407080          ORR      r0,r0,#0x100
000012  60c8              STR      r0,[r1,#0xc]
;;;308    }
000014  4770              BX       lr
;;;309    
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableGPIOPullDown||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableGPIOPullDown PROC
;;;567      */
;;;568    HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
000000  4603              MOV      r3,r0
;;;569    {
000002  b510              PUSH     {r4,lr}
;;;570      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;571    
;;;572      assert_param(IS_PWR_GPIO(GPIO));
;;;573      assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
;;;574    
;;;575      switch (GPIO)
;;;576      {
;;;577        case PWR_GPIO_A:
;;;578           SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
000006  4a25              LDR      r2,|L17.156|
000008  2b08              CMP      r3,#8                 ;575
00000a  d245              BCS      |L17.152|
00000c  e8dff003          TBB      [pc,r3]               ;575
000010  040f181f          DCB      0x04,0x0f,0x18,0x1f
000014  262d343b          DCB      0x26,0x2d,0x34,0x3b
000018  6a53              LDR      r3,[r2,#0x24]
00001a  f4214420          BIC      r4,r1,#0xa000
00001e  4323              ORRS     r3,r3,r4
000020  6253              STR      r3,[r2,#0x24]
;;;579           CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
000022  6a13              LDR      r3,[r2,#0x20]
000024  f4214180          BIC      r1,r1,#0x4000
000028  438b              BICS     r3,r3,r1
00002a  6213              STR      r3,[r2,#0x20]
;;;580           break;
;;;581        case PWR_GPIO_B:
;;;582           SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
;;;583           CLEAR_BIT(PWR->PUCRB, GPIONumber);
;;;584           break;
;;;585        case PWR_GPIO_C:
;;;586           SET_BIT(PWR->PDCRC, GPIONumber);
;;;587           CLEAR_BIT(PWR->PUCRC, GPIONumber);
;;;588           break;
;;;589    #if defined(GPIOD)
;;;590        case PWR_GPIO_D:
;;;591           SET_BIT(PWR->PDCRD, GPIONumber);
;;;592           CLEAR_BIT(PWR->PUCRD, GPIONumber);
;;;593           break;
;;;594    #endif
;;;595    #if defined(GPIOE)
;;;596        case PWR_GPIO_E:
;;;597           SET_BIT(PWR->PDCRE, GPIONumber);
;;;598           CLEAR_BIT(PWR->PUCRE, GPIONumber);
;;;599           break;
;;;600    #endif
;;;601    #if defined(GPIOF)
;;;602        case PWR_GPIO_F:
;;;603           SET_BIT(PWR->PDCRF, GPIONumber);
;;;604           CLEAR_BIT(PWR->PUCRF, GPIONumber);
;;;605           break;
;;;606    #endif
;;;607    #if defined(GPIOG)
;;;608        case PWR_GPIO_G:
;;;609           SET_BIT(PWR->PDCRG, GPIONumber);
;;;610           CLEAR_BIT(PWR->PUCRG, GPIONumber);
;;;611           break;
;;;612    #endif
;;;613        case PWR_GPIO_H:
;;;614    #if defined (STM32L496xx) || defined (STM32L4A6xx)
;;;615           SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
;;;616    #else
;;;617           SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
;;;618    #endif
;;;619           CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
;;;620           break;
;;;621    #if defined(GPIOI)
;;;622        case PWR_GPIO_I:
;;;623           SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
;;;624           CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
;;;625           break;
;;;626    #endif
;;;627        default:
;;;628          status = HAL_ERROR;
;;;629          break;
;;;630      }
;;;631    
;;;632      return status;
;;;633    }
00002c  bd10              POP      {r4,pc}
00002e  6ad3              LDR      r3,[r2,#0x2c]         ;582
000030  f0210410          BIC      r4,r1,#0x10           ;582
000034  4323              ORRS     r3,r3,r4              ;582
000036  62d3              STR      r3,[r2,#0x2c]         ;582
000038  6a93              LDR      r3,[r2,#0x28]         ;583
00003a  438b              BICS     r3,r3,r1              ;583
00003c  6293              STR      r3,[r2,#0x28]         ;583
00003e  bd10              POP      {r4,pc}
000040  6b53              LDR      r3,[r2,#0x34]         ;586
000042  430b              ORRS     r3,r3,r1              ;586
000044  6353              STR      r3,[r2,#0x34]         ;586
000046  6b13              LDR      r3,[r2,#0x30]         ;587
000048  438b              BICS     r3,r3,r1              ;587
00004a  6313              STR      r3,[r2,#0x30]         ;587
00004c  bd10              POP      {r4,pc}
00004e  6bd3              LDR      r3,[r2,#0x3c]         ;591
000050  430b              ORRS     r3,r3,r1              ;591
000052  63d3              STR      r3,[r2,#0x3c]         ;591
000054  6b93              LDR      r3,[r2,#0x38]         ;592
000056  438b              BICS     r3,r3,r1              ;592
000058  6393              STR      r3,[r2,#0x38]         ;592
00005a  bd10              POP      {r4,pc}
00005c  6c53              LDR      r3,[r2,#0x44]         ;597
00005e  430b              ORRS     r3,r3,r1              ;597
000060  6453              STR      r3,[r2,#0x44]         ;597
000062  6c13              LDR      r3,[r2,#0x40]         ;598
000064  438b              BICS     r3,r3,r1              ;598
000066  6413              STR      r3,[r2,#0x40]         ;598
000068  bd10              POP      {r4,pc}
00006a  6cd3              LDR      r3,[r2,#0x4c]         ;603
00006c  430b              ORRS     r3,r3,r1              ;603
00006e  64d3              STR      r3,[r2,#0x4c]         ;603
000070  6c93              LDR      r3,[r2,#0x48]         ;604
000072  438b              BICS     r3,r3,r1              ;604
000074  6493              STR      r3,[r2,#0x48]         ;604
000076  bd10              POP      {r4,pc}
000078  6d53              LDR      r3,[r2,#0x54]         ;609
00007a  430b              ORRS     r3,r3,r1              ;609
00007c  6553              STR      r3,[r2,#0x54]         ;609
00007e  6d13              LDR      r3,[r2,#0x50]         ;610
000080  438b              BICS     r3,r3,r1              ;610
000082  6513              STR      r3,[r2,#0x50]         ;610
000084  bd10              POP      {r4,pc}
000086  6dd3              LDR      r3,[r2,#0x5c]         ;617
000088  f0010103          AND      r1,r1,#3              ;617
00008c  430b              ORRS     r3,r3,r1              ;617
00008e  65d3              STR      r3,[r2,#0x5c]         ;617
000090  6d93              LDR      r3,[r2,#0x58]         ;619
000092  438b              BICS     r3,r3,r1              ;619
000094  6593              STR      r3,[r2,#0x58]         ;619
000096  bd10              POP      {r4,pc}
                  |L17.152|
000098  2001              MOVS     r0,#1                 ;628
00009a  bd10              POP      {r4,pc}
;;;634    
                          ENDP

                  |L17.156|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableGPIOPullUp||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableGPIOPullUp PROC
;;;407      */
;;;408    HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
000000  4603              MOV      r3,r0
;;;409    {
000002  b510              PUSH     {r4,lr}
;;;410      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;411    
;;;412      assert_param(IS_PWR_GPIO(GPIO));
;;;413      assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
;;;414    
;;;415      switch (GPIO)
;;;416      {
;;;417        case PWR_GPIO_A:
;;;418           SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
000006  4a25              LDR      r2,|L18.156|
000008  2b08              CMP      r3,#8                 ;415
00000a  d245              BCS      |L18.152|
00000c  e8dff003          TBB      [pc,r3]               ;415
000010  040f181f          DCB      0x04,0x0f,0x18,0x1f
000014  262d343b          DCB      0x26,0x2d,0x34,0x3b
000018  6a13              LDR      r3,[r2,#0x20]
00001a  f4214480          BIC      r4,r1,#0x4000
00001e  4323              ORRS     r3,r3,r4
000020  6213              STR      r3,[r2,#0x20]
;;;419           CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
000022  6a53              LDR      r3,[r2,#0x24]
000024  f4214120          BIC      r1,r1,#0xa000
000028  438b              BICS     r3,r3,r1
00002a  6253              STR      r3,[r2,#0x24]
;;;420           break;
;;;421        case PWR_GPIO_B:
;;;422           SET_BIT(PWR->PUCRB, GPIONumber);
;;;423           CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
;;;424           break;
;;;425        case PWR_GPIO_C:
;;;426           SET_BIT(PWR->PUCRC, GPIONumber);
;;;427           CLEAR_BIT(PWR->PDCRC, GPIONumber);
;;;428           break;
;;;429    #if defined(GPIOD)
;;;430        case PWR_GPIO_D:
;;;431           SET_BIT(PWR->PUCRD, GPIONumber);
;;;432           CLEAR_BIT(PWR->PDCRD, GPIONumber);
;;;433           break;
;;;434    #endif
;;;435    #if defined(GPIOE)
;;;436        case PWR_GPIO_E:
;;;437           SET_BIT(PWR->PUCRE, GPIONumber);
;;;438           CLEAR_BIT(PWR->PDCRE, GPIONumber);
;;;439           break;
;;;440    #endif
;;;441    #if defined(GPIOF)
;;;442        case PWR_GPIO_F:
;;;443           SET_BIT(PWR->PUCRF, GPIONumber);
;;;444           CLEAR_BIT(PWR->PDCRF, GPIONumber);
;;;445           break;
;;;446    #endif
;;;447    #if defined(GPIOG)
;;;448        case PWR_GPIO_G:
;;;449           SET_BIT(PWR->PUCRG, GPIONumber);
;;;450           CLEAR_BIT(PWR->PDCRG, GPIONumber);
;;;451           break;
;;;452    #endif
;;;453        case PWR_GPIO_H:
;;;454           SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
;;;455    #if defined (STM32L496xx) || defined (STM32L4A6xx)
;;;456           CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
;;;457    #else
;;;458           CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
;;;459    #endif
;;;460           break;
;;;461    #if defined(GPIOI)
;;;462        case PWR_GPIO_I:
;;;463           SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
;;;464           CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
;;;465           break;
;;;466    #endif
;;;467        default:
;;;468          status = HAL_ERROR;
;;;469          break;
;;;470      }
;;;471    
;;;472      return status;
;;;473    }
00002c  bd10              POP      {r4,pc}
00002e  6a93              LDR      r3,[r2,#0x28]         ;422
000030  430b              ORRS     r3,r3,r1              ;422
000032  6293              STR      r3,[r2,#0x28]         ;422
000034  6ad3              LDR      r3,[r2,#0x2c]         ;423
000036  f0210110          BIC      r1,r1,#0x10           ;423
00003a  438b              BICS     r3,r3,r1              ;423
00003c  62d3              STR      r3,[r2,#0x2c]         ;423
00003e  bd10              POP      {r4,pc}
000040  6b13              LDR      r3,[r2,#0x30]         ;426
000042  430b              ORRS     r3,r3,r1              ;426
000044  6313              STR      r3,[r2,#0x30]         ;426
000046  6b53              LDR      r3,[r2,#0x34]         ;427
000048  438b              BICS     r3,r3,r1              ;427
00004a  6353              STR      r3,[r2,#0x34]         ;427
00004c  bd10              POP      {r4,pc}
00004e  6b93              LDR      r3,[r2,#0x38]         ;431
000050  430b              ORRS     r3,r3,r1              ;431
000052  6393              STR      r3,[r2,#0x38]         ;431
000054  6bd3              LDR      r3,[r2,#0x3c]         ;432
000056  438b              BICS     r3,r3,r1              ;432
000058  63d3              STR      r3,[r2,#0x3c]         ;432
00005a  bd10              POP      {r4,pc}
00005c  6c13              LDR      r3,[r2,#0x40]         ;437
00005e  430b              ORRS     r3,r3,r1              ;437
000060  6413              STR      r3,[r2,#0x40]         ;437
000062  6c53              LDR      r3,[r2,#0x44]         ;438
000064  438b              BICS     r3,r3,r1              ;438
000066  6453              STR      r3,[r2,#0x44]         ;438
000068  bd10              POP      {r4,pc}
00006a  6c93              LDR      r3,[r2,#0x48]         ;443
00006c  430b              ORRS     r3,r3,r1              ;443
00006e  6493              STR      r3,[r2,#0x48]         ;443
000070  6cd3              LDR      r3,[r2,#0x4c]         ;444
000072  438b              BICS     r3,r3,r1              ;444
000074  64d3              STR      r3,[r2,#0x4c]         ;444
000076  bd10              POP      {r4,pc}
000078  6d13              LDR      r3,[r2,#0x50]         ;449
00007a  430b              ORRS     r3,r3,r1              ;449
00007c  6513              STR      r3,[r2,#0x50]         ;449
00007e  6d53              LDR      r3,[r2,#0x54]         ;450
000080  438b              BICS     r3,r3,r1              ;450
000082  6553              STR      r3,[r2,#0x54]         ;450
000084  bd10              POP      {r4,pc}
000086  6d93              LDR      r3,[r2,#0x58]         ;454
000088  f0010103          AND      r1,r1,#3              ;454
00008c  430b              ORRS     r3,r3,r1              ;454
00008e  6593              STR      r3,[r2,#0x58]         ;454
000090  6dd3              LDR      r3,[r2,#0x5c]         ;458
000092  438b              BICS     r3,r3,r1              ;458
000094  65d3              STR      r3,[r2,#0x5c]         ;458
000096  bd10              POP      {r4,pc}
                  |L18.152|
000098  2001              MOVS     r0,#1                 ;468
00009a  bd10              POP      {r4,pc}
;;;474    
                          ENDP

                  |L18.156|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableInternalWakeUpLine||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableInternalWakeUpLine PROC
;;;369      */
;;;370    void HAL_PWREx_EnableInternalWakeUpLine(void)
000000  4802              LDR      r0,|L19.12|
;;;371    {
;;;372      SET_BIT(PWR->CR3, PWR_CR3_EIWF);
000002  6881              LDR      r1,[r0,#8]
000004  f4414100          ORR      r1,r1,#0x8000
000008  6081              STR      r1,[r0,#8]
;;;373    }
00000a  4770              BX       lr
;;;374    
                          ENDP

                  |L19.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableLowPowerRunMode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableLowPowerRunMode PROC
;;;1115     */
;;;1116   void HAL_PWREx_EnableLowPowerRunMode(void)
000000  4802              LDR      r0,|L20.12|
;;;1117   {
;;;1118     /* Set Regulator parameter */
;;;1119     SET_BIT(PWR->CR1, PWR_CR1_LPR);
000002  6801              LDR      r1,[r0,#0]
000004  f4414180          ORR      r1,r1,#0x4000
000008  6001              STR      r1,[r0,#0]
;;;1120   }
00000a  4770              BX       lr
;;;1121   
                          ENDP

                  |L20.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnablePVM1||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnablePVM1 PROC
;;;864      */
;;;865    void HAL_PWREx_EnablePVM1(void)
000000  4802              LDR      r0,|L21.12|
;;;866    {
;;;867      SET_BIT(PWR->CR2, PWR_PVM_1);
000002  6841              LDR      r1,[r0,#4]
000004  f0410110          ORR      r1,r1,#0x10
000008  6041              STR      r1,[r0,#4]
;;;868    }
00000a  4770              BX       lr
;;;869    
                          ENDP

                  |L21.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnablePVM2||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnablePVM2 PROC
;;;885      */
;;;886    void HAL_PWREx_EnablePVM2(void)
000000  4802              LDR      r0,|L22.12|
;;;887    {
;;;888      SET_BIT(PWR->CR2, PWR_PVM_2);
000002  6841              LDR      r1,[r0,#4]
000004  f0410120          ORR      r1,r1,#0x20
000008  6041              STR      r1,[r0,#4]
;;;889    }
00000a  4770              BX       lr
;;;890    
                          ENDP

                  |L22.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnablePVM3||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnablePVM3 PROC
;;;905      */
;;;906    void HAL_PWREx_EnablePVM3(void)
000000  4802              LDR      r0,|L23.12|
;;;907    {
;;;908      SET_BIT(PWR->CR2, PWR_PVM_3);
000002  6841              LDR      r1,[r0,#4]
000004  f0410140          ORR      r1,r1,#0x40
000008  6041              STR      r1,[r0,#4]
;;;909    }
00000a  4770              BX       lr
;;;910    
                          ENDP

                  |L23.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnablePVM4||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnablePVM4 PROC
;;;924      */
;;;925    void HAL_PWREx_EnablePVM4(void)
000000  4802              LDR      r0,|L24.12|
;;;926    {
;;;927      SET_BIT(PWR->CR2, PWR_PVM_4);
000002  6841              LDR      r1,[r0,#4]
000004  f0410180          ORR      r1,r1,#0x80
000008  6041              STR      r1,[r0,#4]
;;;928    }
00000a  4770              BX       lr
;;;929    
                          ENDP

                  |L24.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnablePullUpPullDownConfig||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnablePullUpPullDownConfig PROC
;;;720      */
;;;721    void HAL_PWREx_EnablePullUpPullDownConfig(void)
000000  4802              LDR      r0,|L25.12|
;;;722    {
;;;723      SET_BIT(PWR->CR3, PWR_CR3_APC);
000002  6881              LDR      r1,[r0,#8]
000004  f4416180          ORR      r1,r1,#0x400
000008  6081              STR      r1,[r0,#8]
;;;724    }
00000a  4770              BX       lr
;;;725    
                          ENDP

                  |L25.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableSRAM2ContentRetention||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableSRAM2ContentRetention PROC
;;;745      */
;;;746    void HAL_PWREx_EnableSRAM2ContentRetention(void)
000000  4802              LDR      r0,|L26.12|
;;;747    {
;;;748      SET_BIT(PWR->CR3, PWR_CR3_RRS);
000002  6881              LDR      r1,[r0,#8]
000004  f4417180          ORR      r1,r1,#0x100
000008  6081              STR      r1,[r0,#8]
;;;749    }
00000a  4770              BX       lr
;;;750    
                          ENDP

                  |L26.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableVddIO2||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableVddIO2 PROC
;;;348      */
;;;349    void HAL_PWREx_EnableVddIO2(void)
000000  4802              LDR      r0,|L27.12|
;;;350    {
;;;351      SET_BIT(PWR->CR2, PWR_CR2_IOSV);
000002  6841              LDR      r1,[r0,#4]
000004  f4417100          ORR      r1,r1,#0x200
000008  6041              STR      r1,[r0,#4]
;;;352    }
00000a  4770              BX       lr
;;;353    
                          ENDP

                  |L27.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnableVddUSB||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnableVddUSB PROC
;;;326      */
;;;327    void HAL_PWREx_EnableVddUSB(void)
000000  4802              LDR      r0,|L28.12|
;;;328    {
;;;329      SET_BIT(PWR->CR2, PWR_CR2_USV);
000002  6841              LDR      r1,[r0,#4]
000004  f4416180          ORR      r1,r1,#0x400
000008  6041              STR      r1,[r0,#4]
;;;330    }
00000a  4770              BX       lr
;;;331    
                          ENDP

                  |L28.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_EnterSHUTDOWNMode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnterSHUTDOWNMode PROC
;;;1319     */
;;;1320   void HAL_PWREx_EnterSHUTDOWNMode(void)
000000  4806              LDR      r0,|L29.28|
;;;1321   {
;;;1322   
;;;1323     /* Set Shutdown mode */
;;;1324     MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
000002  6801              LDR      r1,[r0,#0]
000004  f0210107          BIC      r1,r1,#7
000008  1d09              ADDS     r1,r1,#4
00000a  6001              STR      r1,[r0,#0]
;;;1325   
;;;1326     /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;1327     SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4804              LDR      r0,|L29.32|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410104          ORR      r1,r1,#4
000014  6001              STR      r1,[r0,#0]
;;;1328   
;;;1329   /* This option is used to ensure that store operations are completed */
;;;1330   #if defined ( __CC_ARM)
;;;1331     __force_stores();
;;;1332   #endif
;;;1333     /* Request Wait For Interrupt */
;;;1334     __WFI();
000016  bf30              WFI      
;;;1335   }
000018  4770              BX       lr
;;;1336   
                          ENDP

00001a  0000              DCW      0x0000
                  |L29.28|
                          DCD      0x40007000
                  |L29.32|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWREx_EnterSTOP0Mode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnterSTOP0Mode PROC
;;;1174     */
;;;1175   void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
000000  490a              LDR      r1,|L30.44|
;;;1176   {
;;;1177     /* Check the parameters */
;;;1178     assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;1179   
;;;1180     /* Stop 0 mode with Main Regulator */
;;;1181     MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
000002  680a              LDR      r2,[r1,#0]
000004  f0220207          BIC      r2,r2,#7
000008  600a              STR      r2,[r1,#0]
;;;1182   
;;;1183     /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;1184     SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000a  4909              LDR      r1,|L30.48|
00000c  680a              LDR      r2,[r1,#0]
00000e  f0420204          ORR      r2,r2,#4
000012  600a              STR      r2,[r1,#0]
;;;1185   
;;;1186     /* Select Stop mode entry --------------------------------------------------*/
;;;1187     if(STOPEntry == PWR_STOPENTRY_WFI)
000014  2801              CMP      r0,#1
000016  d007              BEQ      |L30.40|
;;;1188     {
;;;1189       /* Request Wait For Interrupt */
;;;1190       __WFI();
;;;1191     }
;;;1192     else
;;;1193     {
;;;1194       /* Request Wait For Event */
;;;1195       __SEV();
000018  bf40              SEV      
;;;1196       __WFE();
00001a  bf20              WFE      
;;;1197       __WFE();
00001c  bf20              WFE      
                  |L30.30|
;;;1198     }
;;;1199   
;;;1200     /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;1201     CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00001e  6808              LDR      r0,[r1,#0]
000020  f0200004          BIC      r0,r0,#4
000024  6008              STR      r0,[r1,#0]
;;;1202   }
000026  4770              BX       lr
                  |L30.40|
000028  bf30              WFI                            ;1190
00002a  e7f8              B        |L30.30|
;;;1203   
                          ENDP

                  |L30.44|
                          DCD      0x40007000
                  |L30.48|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWREx_EnterSTOP1Mode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnterSTOP1Mode PROC
;;;1225     */
;;;1226   void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
000000  490b              LDR      r1,|L31.48|
;;;1227   {
;;;1228     /* Check the parameters */
;;;1229     assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;1230   
;;;1231     /* Stop 1 mode with Low-Power Regulator */
;;;1232     MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
000002  680a              LDR      r2,[r1,#0]
000004  f0220207          BIC      r2,r2,#7
000008  1c52              ADDS     r2,r2,#1
00000a  600a              STR      r2,[r1,#0]
;;;1233   
;;;1234     /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;1235     SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4909              LDR      r1,|L31.52|
00000e  680a              LDR      r2,[r1,#0]
000010  f0420204          ORR      r2,r2,#4
000014  600a              STR      r2,[r1,#0]
;;;1236   
;;;1237     /* Select Stop mode entry --------------------------------------------------*/
;;;1238     if(STOPEntry == PWR_STOPENTRY_WFI)
000016  2801              CMP      r0,#1
000018  d007              BEQ      |L31.42|
;;;1239     {
;;;1240       /* Request Wait For Interrupt */
;;;1241       __WFI();
;;;1242     }
;;;1243     else
;;;1244     {
;;;1245       /* Request Wait For Event */
;;;1246       __SEV();
00001a  bf40              SEV      
;;;1247       __WFE();
00001c  bf20              WFE      
;;;1248       __WFE();
00001e  bf20              WFE      
                  |L31.32|
;;;1249     }
;;;1250   
;;;1251     /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;1252     CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000020  6808              LDR      r0,[r1,#0]
000022  f0200004          BIC      r0,r0,#4
000026  6008              STR      r0,[r1,#0]
;;;1253   }
000028  4770              BX       lr
                  |L31.42|
00002a  bf30              WFI                            ;1241
00002c  e7f8              B        |L31.32|
;;;1254   
                          ENDP

00002e  0000              DCW      0x0000
                  |L31.48|
                          DCD      0x40007000
                  |L31.52|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWREx_EnterSTOP2Mode||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_EnterSTOP2Mode PROC
;;;1277     */
;;;1278   void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
000000  490b              LDR      r1,|L32.48|
;;;1279   {
;;;1280     /* Check the parameter */
;;;1281     assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;1282   
;;;1283     /* Set Stop mode 2 */
;;;1284     MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
000002  680a              LDR      r2,[r1,#0]
000004  f0220207          BIC      r2,r2,#7
000008  1c92              ADDS     r2,r2,#2
00000a  600a              STR      r2,[r1,#0]
;;;1285   
;;;1286     /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;1287     SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4909              LDR      r1,|L32.52|
00000e  680a              LDR      r2,[r1,#0]
000010  f0420204          ORR      r2,r2,#4
000014  600a              STR      r2,[r1,#0]
;;;1288   
;;;1289     /* Select Stop mode entry --------------------------------------------------*/
;;;1290     if(STOPEntry == PWR_STOPENTRY_WFI)
000016  2801              CMP      r0,#1
000018  d007              BEQ      |L32.42|
;;;1291     {
;;;1292       /* Request Wait For Interrupt */
;;;1293       __WFI();
;;;1294     }
;;;1295     else
;;;1296     {
;;;1297       /* Request Wait For Event */
;;;1298       __SEV();
00001a  bf40              SEV      
;;;1299       __WFE();
00001c  bf20              WFE      
;;;1300       __WFE();
00001e  bf20              WFE      
                  |L32.32|
;;;1301     }
;;;1302   
;;;1303     /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;1304     CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000020  6808              LDR      r0,[r1,#0]
000022  f0200004          BIC      r0,r0,#4
000026  6008              STR      r0,[r1,#0]
;;;1305   }
000028  4770              BX       lr
                  |L32.42|
00002a  bf30              WFI                            ;1293
00002c  e7f8              B        |L32.32|
;;;1306   
                          ENDP

00002e  0000              DCW      0x0000
                  |L32.48|
                          DCD      0x40007000
                  |L32.52|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWREx_GetVoltageRange||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_GetVoltageRange PROC
;;;130      */
;;;131    uint32_t HAL_PWREx_GetVoltageRange(void)
000000  4802              LDR      r0,|L33.12|
;;;132    {
;;;133    #if defined(PWR_CR5_R1MODE)
;;;134        if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
;;;135        {
;;;136          return PWR_REGULATOR_VOLTAGE_SCALE2;
;;;137        }
;;;138        else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
;;;139        {
;;;140          /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
;;;141          return PWR_REGULATOR_VOLTAGE_SCALE1;
;;;142        }
;;;143        else
;;;144        {
;;;145          return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
;;;146        }
;;;147    #else
;;;148      return  (PWR->CR1 & PWR_CR1_VOS);
000002  6800              LDR      r0,[r0,#0]
000004  f40060c0          AND      r0,r0,#0x600
;;;149    #endif
;;;150    }
000008  4770              BX       lr
;;;151    
                          ENDP

00000a  0000              DCW      0x0000
                  |L33.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWREx_PVD_PVM_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWREx_PVD_PVM_IRQHandler PROC
;;;1344     */
;;;1345   void HAL_PWREx_PVD_PVM_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1346   {
;;;1347     /* Check PWR exti flag */
;;;1348     if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
000002  4c14              LDR      r4,|L34.84|
000004  6820              LDR      r0,[r4,#0]
000006  03c0              LSLS     r0,r0,#15
000008  d504              BPL      |L34.20|
;;;1349     {
;;;1350       /* PWR PVD interrupt user callback */
;;;1351       HAL_PWR_PVDCallback();
00000a  f7fffffe          BL       HAL_PWR_PVDCallback
;;;1352   
;;;1353       /* Clear PVD exti pending bit */
;;;1354       __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
00000e  f44f3080          MOV      r0,#0x10000
000012  6020              STR      r0,[r4,#0]
                  |L34.20|
;;;1355     }
;;;1356     /* Next, successively check PVMx exti flags */
;;;1357   #if defined(PWR_CR2_PVME1)
;;;1358     if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
000014  4c0f              LDR      r4,|L34.84|
000016  3420              ADDS     r4,r4,#0x20
000018  6820              LDR      r0,[r4,#0]
00001a  0700              LSLS     r0,r0,#28
00001c  d503              BPL      |L34.38|
;;;1359     {
;;;1360       /* PWR PVM1 interrupt user callback */
;;;1361       HAL_PWREx_PVM1Callback();
00001e  f7fffffe          BL       HAL_PWREx_PVM1Callback
;;;1362   
;;;1363       /* Clear PVM1 exti pending bit */
;;;1364       __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
000022  2008              MOVS     r0,#8
000024  6020              STR      r0,[r4,#0]
                  |L34.38|
;;;1365     }
;;;1366   #endif /* PWR_CR2_PVME1 */
;;;1367   #if defined(PWR_CR2_PVME2)
;;;1368     if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
000026  6820              LDR      r0,[r4,#0]
000028  06c0              LSLS     r0,r0,#27
00002a  d503              BPL      |L34.52|
;;;1369     {
;;;1370       /* PWR PVM2 interrupt user callback */
;;;1371       HAL_PWREx_PVM2Callback();
00002c  f7fffffe          BL       HAL_PWREx_PVM2Callback
;;;1372   
;;;1373       /* Clear PVM2 exti pending bit */
;;;1374       __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
000030  2010              MOVS     r0,#0x10
000032  6020              STR      r0,[r4,#0]
                  |L34.52|
;;;1375     }
;;;1376   #endif /* PWR_CR2_PVME2 */
;;;1377     if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
000034  6820              LDR      r0,[r4,#0]
000036  0680              LSLS     r0,r0,#26
000038  d503              BPL      |L34.66|
;;;1378     {
;;;1379       /* PWR PVM3 interrupt user callback */
;;;1380       HAL_PWREx_PVM3Callback();
00003a  f7fffffe          BL       HAL_PWREx_PVM3Callback
;;;1381   
;;;1382       /* Clear PVM3 exti pending bit */
;;;1383       __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
00003e  2020              MOVS     r0,#0x20
000040  6020              STR      r0,[r4,#0]
                  |L34.66|
;;;1384     }
;;;1385     if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
000042  6820              LDR      r0,[r4,#0]
000044  0640              LSLS     r0,r0,#25
000046  d503              BPL      |L34.80|
;;;1386     {
;;;1387       /* PWR PVM4 interrupt user callback */
;;;1388       HAL_PWREx_PVM4Callback();
000048  f7fffffe          BL       HAL_PWREx_PVM4Callback
;;;1389   
;;;1390       /* Clear PVM4 exti pending bit */
;;;1391       __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
00004c  2040              MOVS     r0,#0x40
00004e  6020              STR      r0,[r4,#0]
                  |L34.80|
;;;1392     }
;;;1393   }
000050  bd10              POP      {r4,pc}
;;;1394   
                          ENDP

000052  0000              DCW      0x0000
                  |L34.84|
                          DCD      0x40010414

                          AREA ||i.HAL_PWREx_PVM1Callback||, CODE, READONLY, ALIGN=1

                  HAL_PWREx_PVM1Callback PROC
;;;1400     */
;;;1401   __weak void HAL_PWREx_PVM1Callback(void)
000000  4770              BX       lr
;;;1402   {
;;;1403     /* NOTE : This function should not be modified; when the callback is needed,
;;;1404               HAL_PWREx_PVM1Callback() API can be implemented in the user file
;;;1405      */
;;;1406   }
;;;1407   #endif /* PWR_CR2_PVME1 */
                          ENDP


                          AREA ||i.HAL_PWREx_PVM2Callback||, CODE, READONLY, ALIGN=1

                  HAL_PWREx_PVM2Callback PROC
;;;1413     */
;;;1414   __weak void HAL_PWREx_PVM2Callback(void)
000000  4770              BX       lr
;;;1415   {
;;;1416     /* NOTE : This function should not be modified; when the callback is needed,
;;;1417               HAL_PWREx_PVM2Callback() API can be implemented in the user file
;;;1418      */
;;;1419   }
;;;1420   #endif /* PWR_CR2_PVME2 */
                          ENDP


                          AREA ||i.HAL_PWREx_PVM3Callback||, CODE, READONLY, ALIGN=1

                  HAL_PWREx_PVM3Callback PROC
;;;1425     */
;;;1426   __weak void HAL_PWREx_PVM3Callback(void)
000000  4770              BX       lr
;;;1427   {
;;;1428     /* NOTE : This function should not be modified; when the callback is needed,
;;;1429               HAL_PWREx_PVM3Callback() API can be implemented in the user file
;;;1430      */
;;;1431   }
;;;1432   
                          ENDP


                          AREA ||i.HAL_PWREx_PVM4Callback||, CODE, READONLY, ALIGN=1

                  HAL_PWREx_PVM4Callback PROC
;;;1436     */
;;;1437   __weak void HAL_PWREx_PVM4Callback(void)
000000  4770              BX       lr
;;;1438   {
;;;1439     /* NOTE : This function should not be modified; when the callback is needed,
;;;1440               HAL_PWREx_PVM4Callback() API can be implemented in the user file
;;;1441      */
;;;1442   }
;;;1443   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32L4xx_HAL_Driver\\Src\\stm32l4xx_hal_pwr_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32l4xx_hal_pwr_ex_c_93c7a9b9____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___22_stm32l4xx_hal_pwr_ex_c_93c7a9b9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32l4xx_hal_pwr_ex_c_93c7a9b9____REVSH|
#line 402
|__asm___22_stm32l4xx_hal_pwr_ex_c_93c7a9b9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32l4xx_hal_pwr_ex_c_93c7a9b9____RRX|
#line 587
|__asm___22_stm32l4xx_hal_pwr_ex_c_93c7a9b9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
