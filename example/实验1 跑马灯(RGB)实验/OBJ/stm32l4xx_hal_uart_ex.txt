; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32l4xx_hal_uart_ex.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32l4xx_hal_uart_ex.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\stm32l4xx_hal_uart_ex.crf ..\HALLIB\STM32L4xx_HAL_Driver\Src\stm32l4xx_hal_uart_ex.c]
                          THUMB

                          AREA ||i.HAL_MultiProcessorEx_AddressLength_Set||, CODE, READONLY, ALIGN=1

                  HAL_MultiProcessorEx_AddressLength_Set PROC
;;;419      */
;;;420    HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength)
000000  b1a0              CBZ      r0,|L1.44|
;;;421    {
;;;422      /* Check the UART handle allocation */
;;;423      if (huart == NULL)
;;;424      {
;;;425        return HAL_ERROR;
;;;426      }
;;;427    
;;;428      /* Check the address length parameter */
;;;429      assert_param(IS_UART_ADDRESSLENGTH_DETECT(AddressLength));
;;;430    
;;;431      huart->gState = HAL_UART_STATE_BUSY;
000002  2224              MOVS     r2,#0x24
000004  f8802071          STRB     r2,[r0,#0x71]
;;;432    
;;;433      /* Disable the Peripheral */
;;;434      __HAL_UART_DISABLE(huart);
000008  6802              LDR      r2,[r0,#0]
00000a  6813              LDR      r3,[r2,#0]
00000c  f0230301          BIC      r3,r3,#1
000010  6013              STR      r3,[r2,#0]
;;;435    
;;;436      /* Set the address length */
;;;437      MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, AddressLength);
000012  6802              LDR      r2,[r0,#0]
000014  6853              LDR      r3,[r2,#4]
000016  f0230310          BIC      r3,r3,#0x10
00001a  430b              ORRS     r3,r3,r1
00001c  6053              STR      r3,[r2,#4]
;;;438    
;;;439      /* Enable the Peripheral */
;;;440      __HAL_UART_ENABLE(huart);
00001e  6801              LDR      r1,[r0,#0]
000020  680a              LDR      r2,[r1,#0]
000022  f0420201          ORR      r2,r2,#1
000026  600a              STR      r2,[r1,#0]
;;;441    
;;;442      /* TEACK and/or REACK to check before moving huart->gState to Ready */
;;;443      return (UART_CheckIdleState(huart));
000028  f7ffbffe          B.W      UART_CheckIdleState
                  |L1.44|
00002c  2001              MOVS     r0,#1                 ;425
;;;444    }
00002e  4770              BX       lr
;;;445    
                          ENDP


                          AREA ||i.HAL_RS485Ex_Init||, CODE, READONLY, ALIGN=2

                  HAL_RS485Ex_Init PROC
;;;182      */
;;;183    HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime, uint32_t DeassertionTime)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;184    {
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
000008  460f              MOV      r7,r1
00000a  0004              MOVS     r4,r0
00000c  d003              BEQ      |L2.22|
;;;185      uint32_t temp = 0x0U;
;;;186    
;;;187      /* Check the UART handle allocation */
;;;188      if (huart == NULL)
;;;189      {
;;;190        return HAL_ERROR;
;;;191      }
;;;192      /* Check the Driver Enable UART instance */
;;;193      assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
;;;194    
;;;195      /* Check the Driver Enable polarity */
;;;196      assert_param(IS_UART_DE_POLARITY(Polarity));
;;;197    
;;;198      /* Check the Driver Enable assertion time */
;;;199      assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
;;;200    
;;;201      /* Check the Driver Enable deassertion time */
;;;202      assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
;;;203    
;;;204      if (huart->gState == HAL_UART_STATE_RESET)
00000e  f8940071          LDRB     r0,[r4,#0x71]
000012  b118              CBZ      r0,|L2.28|
000014  e008              B        |L2.40|
                  |L2.22|
000016  2001              MOVS     r0,#1                 ;190
                  |L2.24|
;;;205      {
;;;206        /* Allocate lock resource and initialize it */
;;;207        huart->Lock = HAL_UNLOCKED;
;;;208    
;;;209    #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
;;;210        UART_InitCallbacksToDefault(huart);
;;;211    
;;;212        if (huart->MspInitCallback == NULL)
;;;213        {
;;;214          huart->MspInitCallback = HAL_UART_MspInit;
;;;215        }
;;;216    
;;;217        /* Init the low level hardware */
;;;218        huart->MspInitCallback(huart);
;;;219    #else
;;;220        /* Init the low level hardware : GPIO, CLOCK, CORTEX */
;;;221        HAL_UART_MspInit(huart);
;;;222    #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
;;;223      }
;;;224    
;;;225      huart->gState = HAL_UART_STATE_BUSY;
;;;226    
;;;227      /* Disable the Peripheral */
;;;228      __HAL_UART_DISABLE(huart);
;;;229    
;;;230      /* Set the UART Communication parameters */
;;;231      if (UART_SetConfig(huart) == HAL_ERROR)
;;;232      {
;;;233        return HAL_ERROR;
;;;234      }
;;;235    
;;;236      if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
;;;237      {
;;;238        UART_AdvFeatureConfig(huart);
;;;239      }
;;;240    
;;;241      /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
;;;242      SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
;;;243    
;;;244      /* Set the Driver Enable polarity */
;;;245      MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
;;;246    
;;;247      /* Set the Driver Enable assertion and deassertion times */
;;;248      temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
;;;249      temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
;;;250      MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
;;;251    
;;;252      /* Enable the Peripheral */
;;;253      __HAL_UART_ENABLE(huart);
;;;254    
;;;255      /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
;;;256      return (UART_CheckIdleState(huart));
;;;257    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L2.28|
00001c  2000              MOVS     r0,#0                 ;207
00001e  f8840070          STRB     r0,[r4,#0x70]         ;207
000022  4620              MOV      r0,r4                 ;221
000024  f7fffffe          BL       HAL_UART_MspInit
                  |L2.40|
000028  2024              MOVS     r0,#0x24              ;225
00002a  f8840071          STRB     r0,[r4,#0x71]         ;225
00002e  6820              LDR      r0,[r4,#0]            ;228
000030  6801              LDR      r1,[r0,#0]            ;228
000032  f0210101          BIC      r1,r1,#1              ;228
000036  6001              STR      r1,[r0,#0]            ;228
000038  4620              MOV      r0,r4                 ;231
00003a  f7fffffe          BL       UART_SetConfig
00003e  2801              CMP      r0,#1                 ;231
000040  d0ea              BEQ      |L2.24|
000042  6a60              LDR      r0,[r4,#0x24]         ;236
000044  b110              CBZ      r0,|L2.76|
000046  4620              MOV      r0,r4                 ;238
000048  f7fffffe          BL       UART_AdvFeatureConfig
                  |L2.76|
00004c  6820              LDR      r0,[r4,#0]            ;242
00004e  6881              LDR      r1,[r0,#8]            ;242
000050  f4414180          ORR      r1,r1,#0x4000         ;242
000054  6081              STR      r1,[r0,#8]            ;242
000056  6820              LDR      r0,[r4,#0]            ;245
000058  6881              LDR      r1,[r0,#8]            ;245
00005a  f4214100          BIC      r1,r1,#0x8000         ;245
00005e  4339              ORRS     r1,r1,r7              ;245
000060  6081              STR      r1,[r0,#8]            ;245
000062  0570              LSLS     r0,r6,#21             ;248
000064  ea404105          ORR      r1,r0,r5,LSL #16      ;249
000068  6820              LDR      r0,[r4,#0]            ;250
00006a  6802              LDR      r2,[r0,#0]            ;250
00006c  4b06              LDR      r3,|L2.136|
00006e  401a              ANDS     r2,r2,r3              ;250
000070  430a              ORRS     r2,r2,r1              ;250
000072  6002              STR      r2,[r0,#0]            ;250
000074  6820              LDR      r0,[r4,#0]            ;253
000076  6801              LDR      r1,[r0,#0]            ;253
000078  f0410101          ORR      r1,r1,#1              ;253
00007c  6001              STR      r1,[r0,#0]            ;253
00007e  4620              MOV      r0,r4                 ;256
000080  e8bd41f0          POP      {r4-r8,lr}            ;256
000084  f7ffbffe          B.W      UART_CheckIdleState
;;;258    
                          ENDP

                  |L2.136|
                          DCD      0xfc00ffff

                          AREA ||i.HAL_UARTEx_DisableClockStopMode||, CODE, READONLY, ALIGN=1

                  HAL_UARTEx_DisableClockStopMode PROC
;;;391      */
;;;392    HAL_StatusTypeDef HAL_UARTEx_DisableClockStopMode(UART_HandleTypeDef *huart)
000000  f8901070          LDRB     r1,[r0,#0x70]
;;;393    {
;;;394      /* Process Locked */
;;;395      __HAL_LOCK(huart);
000004  2901              CMP      r1,#1
000006  d00c              BEQ      |L3.34|
000008  2101              MOVS     r1,#1
00000a  f8801070          STRB     r1,[r0,#0x70]
;;;396    
;;;397      /* Clear UCESM bit */
;;;398      CLEAR_BIT(huart->Instance->CR3, USART_CR3_UCESM);
00000e  6801              LDR      r1,[r0,#0]
000010  688a              LDR      r2,[r1,#8]
000012  f4220200          BIC      r2,r2,#0x800000
000016  608a              STR      r2,[r1,#8]
;;;399    
;;;400      /* Process Unlocked */
;;;401      __HAL_UNLOCK(huart);
000018  2100              MOVS     r1,#0
00001a  f8801070          STRB     r1,[r0,#0x70]
;;;402    
;;;403      return HAL_OK;
00001e  4608              MOV      r0,r1
;;;404    }
000020  4770              BX       lr
                  |L3.34|
000022  2002              MOVS     r0,#2                 ;395
000024  4770              BX       lr
;;;405    #endif /* USART_CR3_UCESM */
                          ENDP


                          AREA ||i.HAL_UARTEx_DisableStopMode||, CODE, READONLY, ALIGN=1

                  HAL_UARTEx_DisableStopMode PROC
;;;533      */
;;;534    HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart)
000000  f8901070          LDRB     r1,[r0,#0x70]
;;;535    {
;;;536      /* Process Locked */
;;;537      __HAL_LOCK(huart);
000004  2901              CMP      r1,#1
000006  d00c              BEQ      |L4.34|
000008  2101              MOVS     r1,#1
00000a  f8801070          STRB     r1,[r0,#0x70]
;;;538    
;;;539      /* Clear UESM bit */
;;;540      CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
00000e  6801              LDR      r1,[r0,#0]
000010  680a              LDR      r2,[r1,#0]
000012  f0220202          BIC      r2,r2,#2
000016  600a              STR      r2,[r1,#0]
;;;541    
;;;542      /* Process Unlocked */
;;;543      __HAL_UNLOCK(huart);
000018  2100              MOVS     r1,#0
00001a  f8801070          STRB     r1,[r0,#0x70]
;;;544    
;;;545      return HAL_OK;
00001e  4608              MOV      r0,r1
;;;546    }
000020  4770              BX       lr
                  |L4.34|
000022  2002              MOVS     r0,#2                 ;537
000024  4770              BX       lr
;;;547    
                          ENDP


                          AREA ||i.HAL_UARTEx_EnableClockStopMode||, CODE, READONLY, ALIGN=1

                  HAL_UARTEx_EnableClockStopMode PROC
;;;372      */
;;;373    HAL_StatusTypeDef HAL_UARTEx_EnableClockStopMode(UART_HandleTypeDef *huart)
000000  f8901070          LDRB     r1,[r0,#0x70]
;;;374    {
;;;375      /* Process Locked */
;;;376      __HAL_LOCK(huart);
000004  2901              CMP      r1,#1
000006  d00c              BEQ      |L5.34|
000008  2101              MOVS     r1,#1
00000a  f8801070          STRB     r1,[r0,#0x70]
;;;377    
;;;378      /* Set UCESM bit */
;;;379      SET_BIT(huart->Instance->CR3, USART_CR3_UCESM);
00000e  6801              LDR      r1,[r0,#0]
000010  688a              LDR      r2,[r1,#8]
000012  f4420200          ORR      r2,r2,#0x800000
000016  608a              STR      r2,[r1,#8]
;;;380    
;;;381      /* Process Unlocked */
;;;382      __HAL_UNLOCK(huart);
000018  2100              MOVS     r1,#0
00001a  f8801070          STRB     r1,[r0,#0x70]
;;;383    
;;;384      return HAL_OK;
00001e  4608              MOV      r0,r1
;;;385    }
000020  4770              BX       lr
                  |L5.34|
000022  2002              MOVS     r0,#2                 ;376
000024  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.HAL_UARTEx_EnableStopMode||, CODE, READONLY, ALIGN=1

                  HAL_UARTEx_EnableStopMode PROC
;;;514      */
;;;515    HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
000000  f8901070          LDRB     r1,[r0,#0x70]
;;;516    {
;;;517      /* Process Locked */
;;;518      __HAL_LOCK(huart);
000004  2901              CMP      r1,#1
000006  d00c              BEQ      |L6.34|
000008  2101              MOVS     r1,#1
00000a  f8801070          STRB     r1,[r0,#0x70]
;;;519    
;;;520      /* Set UESM bit */
;;;521      SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
00000e  6801              LDR      r1,[r0,#0]
000010  680a              LDR      r2,[r1,#0]
000012  f0420202          ORR      r2,r2,#2
000016  600a              STR      r2,[r1,#0]
;;;522    
;;;523      /* Process Unlocked */
;;;524      __HAL_UNLOCK(huart);
000018  2100              MOVS     r1,#0
00001a  f8801070          STRB     r1,[r0,#0x70]
;;;525    
;;;526      return HAL_OK;
00001e  4608              MOV      r0,r1
;;;527    }
000020  4770              BX       lr
                  |L6.34|
000022  2002              MOVS     r0,#2                 ;518
000024  4770              BX       lr
;;;528    
                          ENDP


                          AREA ||i.HAL_UARTEx_StopModeWakeUpSourceConfig||, CODE, READONLY, ALIGN=1

                  HAL_UARTEx_StopModeWakeUpSourceConfig PROC
;;;458      */
;;;459    HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
000000  b538              PUSH     {r3-r5,lr}
;;;460    {
000002  4604              MOV      r4,r0
;;;461      HAL_StatusTypeDef status = HAL_OK;
;;;462      uint32_t tickstart = 0U;
;;;463    
;;;464      /* check the wake-up from stop mode UART instance */
;;;465      assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
;;;466      /* check the wake-up selection parameter */
;;;467      assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));
;;;468    
;;;469      /* Process Locked */
;;;470      __HAL_LOCK(huart);
000004  f8900070          LDRB     r0,[r0,#0x70]
000008  2500              MOVS     r5,#0                 ;461
00000a  2801              CMP      r0,#1
00000c  d012              BEQ      |L7.52|
00000e  2001              MOVS     r0,#1
000010  f8840070          STRB     r0,[r4,#0x70]
;;;471    
;;;472      huart->gState = HAL_UART_STATE_BUSY;
000014  2024              MOVS     r0,#0x24
000016  f8840071          STRB     r0,[r4,#0x71]
;;;473    
;;;474      /* Disable the Peripheral */
;;;475      __HAL_UART_DISABLE(huart);
00001a  6820              LDR      r0,[r4,#0]
00001c  6803              LDR      r3,[r0,#0]
00001e  f0230301          BIC      r3,r3,#1
000022  6003              STR      r3,[r0,#0]
;;;476    
;;;477      /* Set the wake-up selection scheme */
;;;478      MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
000024  6820              LDR      r0,[r4,#0]
000026  6883              LDR      r3,[r0,#8]
000028  f4231340          BIC      r3,r3,#0x300000
00002c  430b              ORRS     r3,r3,r1
00002e  6083              STR      r3,[r0,#8]
000030  b111              CBZ      r1,|L7.56|
000032  e00e              B        |L7.82|
                  |L7.52|
000034  2002              MOVS     r0,#2                 ;470
;;;479    
;;;480      if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
;;;481      {
;;;482        UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
;;;483      }
;;;484    
;;;485      /* Enable the Peripheral */
;;;486      __HAL_UART_ENABLE(huart);
;;;487    
;;;488      /* Init tickstart for timeout managment*/
;;;489      tickstart = HAL_GetTick();
;;;490    
;;;491      /* Wait until REACK flag is set */
;;;492      if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
;;;493      {
;;;494        status = HAL_TIMEOUT;
;;;495      }
;;;496      else
;;;497      {
;;;498        /* Initialize the UART State */
;;;499        huart->gState = HAL_UART_STATE_READY;
;;;500      }
;;;501    
;;;502      /* Process Unlocked */
;;;503      __HAL_UNLOCK(huart);
;;;504    
;;;505      return status;
;;;506    }
000036  bd38              POP      {r3-r5,pc}
                  |L7.56|
000038  6820              LDR      r0,[r4,#0]
00003a  6841              LDR      r1,[r0,#4]
00003c  b293              UXTH     r3,r2
00003e  f0210110          BIC      r1,r1,#0x10
000042  4319              ORRS     r1,r1,r3
000044  6041              STR      r1,[r0,#4]
000046  6820              LDR      r0,[r4,#0]
000048  0c12              LSRS     r2,r2,#16
00004a  6841              LDR      r1,[r0,#4]
00004c  f362611f          BFI      r1,r2,#24,#8
000050  6041              STR      r1,[r0,#4]
                  |L7.82|
000052  6820              LDR      r0,[r4,#0]            ;486
000054  6801              LDR      r1,[r0,#0]            ;486
000056  f0410101          ORR      r1,r1,#1              ;486
00005a  6001              STR      r1,[r0,#0]            ;486
00005c  f7fffffe          BL       HAL_GetTick
000060  4603              MOV      r3,r0                 ;489
000062  f06f407e          MVN      r0,#0xfe000000        ;492
000066  9000              STR      r0,[sp,#0]            ;492
000068  2200              MOVS     r2,#0                 ;492
00006a  f44f0180          MOV      r1,#0x400000          ;492
00006e  4620              MOV      r0,r4                 ;492
000070  f7fffffe          BL       UART_WaitOnFlagUntilTimeout
000074  b108              CBZ      r0,|L7.122|
000076  2503              MOVS     r5,#3                 ;494
000078  e002              B        |L7.128|
                  |L7.122|
00007a  2020              MOVS     r0,#0x20              ;499
00007c  f8840071          STRB     r0,[r4,#0x71]         ;499
                  |L7.128|
000080  2000              MOVS     r0,#0                 ;503
000082  f8840070          STRB     r0,[r4,#0x70]         ;503
000086  4628              MOV      r0,r5                 ;505
000088  bd38              POP      {r3-r5,pc}
;;;507    
                          ENDP


                          AREA ||i.HAL_UARTEx_WakeupCallback||, CODE, READONLY, ALIGN=1

                  HAL_UARTEx_WakeupCallback PROC
;;;288      */
;;;289    __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
000000  4770              BX       lr
;;;290    {
;;;291      /* Prevent unused argument(s) compilation warning */
;;;292      UNUSED(huart);
;;;293    
;;;294      /* NOTE : This function should not be modified, when the callback is needed,
;;;295                the HAL_UARTEx_WakeupCallback can be implemented in the user file.
;;;296       */
;;;297    }
;;;298    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32L4xx_HAL_Driver\\Src\\stm32l4xx_hal_uart_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32l4xx_hal_uart_ex_c_83a37df4____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___23_stm32l4xx_hal_uart_ex_c_83a37df4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32l4xx_hal_uart_ex_c_83a37df4____REVSH|
#line 402
|__asm___23_stm32l4xx_hal_uart_ex_c_83a37df4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32l4xx_hal_uart_ex_c_83a37df4____RRX|
#line 587
|__asm___23_stm32l4xx_hal_uart_ex_c_83a37df4____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
