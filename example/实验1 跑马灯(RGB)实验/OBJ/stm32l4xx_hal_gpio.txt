; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32l4xx_hal_gpio.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32l4xx_hal_gpio.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\USER -I..\CORE -I..\HALLIB\STM32L4xx_HAL_Driver\Inc -I..\HALLIB\STM32L4xx_HAL_Driver\Inc\Legacy -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\HARDWARE\LED -I..\App\src -I.\RTE\_ATK_LED -IF:\KEIL5\ARM\PACK\Keil\STM32L4xx_DFP\2.2.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -IF:\KEIL5\ARM\CMSIS\Include -D__UVISION_VERSION=526 -DSTM32L475xx -DUSE_HAL_DRIVER -DSTM32L475xx --omf_browse=..\obj\stm32l4xx_hal_gpio.crf ..\HALLIB\STM32L4xx_HAL_Driver\Src\stm32l4xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;326      */
;;;327    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;328    {
;;;329      uint32_t position = 0x00u;
000004  2200              MOVS     r2,#0
;;;330      uint32_t iocurrent;
;;;331      uint32_t tmp;
;;;332    
;;;333      /* Check the parameters */
;;;334      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;335      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;336    
;;;337      /* Configure the port pins */
;;;338      while ((GPIO_Pin >> position) != 0x00u)
;;;339      {
;;;340        /* Get current io position */
;;;341        iocurrent = (GPIO_Pin) & (1uL << position);
000006  f04f0a01          MOV      r10,#1
;;;342    
;;;343        if (iocurrent != 0x00u)
;;;344        {
;;;345          /*------------------------- GPIO Mode Configuration --------------------*/
;;;346          /* Configure IO in Analog Mode */
;;;347          GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
;;;348    
;;;349          /* Configure the default Alternate Function in current IO */
;;;350          GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
00000a  f04f080f          MOV      r8,#0xf
;;;351    
;;;352          /* Configure the default value for IO Speed */
;;;353          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
;;;354    
;;;355          /* Configure the default value IO Output Type */
;;;356          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
;;;357    
;;;358          /* Deactivate the Pull-up and Pull-down resistor for the current IO */
;;;359          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
;;;360    
;;;361    #if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
;;;362          /* Deactivate the Control bit of Analog mode for the current IO */
;;;363          GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
;;;364    #endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
;;;365    
;;;366          /*------------------------- EXTI Mode Configuration --------------------*/
;;;367          /* Clear the External Interrupt or Event for the current IO */
;;;368    
;;;369          tmp = SYSCFG->EXTICR[position >> 2u];
00000e  f8dfb0e4          LDR      r11,|L1.244|
000012  e069              B        |L1.232|
                  |L1.20|
000014  fa0af402          LSL      r4,r10,r2             ;341
000018  ea140301          ANDS     r3,r4,r1              ;341
00001c  d063              BEQ      |L1.230|
00001e  6806              LDR      r6,[r0,#0]            ;347
000020  0057              LSLS     r7,r2,#1              ;347
000022  2503              MOVS     r5,#3                 ;347
000024  40bd              LSLS     r5,r5,r7              ;347
000026  432e              ORRS     r6,r6,r5              ;347
000028  6006              STR      r6,[r0,#0]            ;347
00002a  08d6              LSRS     r6,r2,#3              ;350
00002c  eb000686          ADD      r6,r0,r6,LSL #2       ;350
000030  f8d6c020          LDR      r12,[r6,#0x20]        ;350
000034  0757              LSLS     r7,r2,#29             ;350
000036  ea4f69d7          LSR      r9,r7,#27             ;350
00003a  fa08f709          LSL      r7,r8,r9              ;350
00003e  ea2c0c07          BIC      r12,r12,r7            ;350
000042  f8c6c020          STR      r12,[r6,#0x20]        ;350
000046  6886              LDR      r6,[r0,#8]            ;353
000048  43ae              BICS     r6,r6,r5              ;353
00004a  6086              STR      r6,[r0,#8]            ;353
00004c  6846              LDR      r6,[r0,#4]            ;356
00004e  43a6              BICS     r6,r6,r4              ;356
000050  6046              STR      r6,[r0,#4]            ;356
000052  68c6              LDR      r6,[r0,#0xc]          ;359
000054  43ae              BICS     r6,r6,r5              ;359
000056  60c6              STR      r6,[r0,#0xc]          ;359
000058  6ac5              LDR      r5,[r0,#0x2c]         ;363
00005a  43a5              BICS     r5,r5,r4              ;363
00005c  62c5              STR      r5,[r0,#0x2c]         ;363
00005e  f0220503          BIC      r5,r2,#3
000062  445d              ADD      r5,r5,r11
000064  68ac              LDR      r4,[r5,#8]
;;;370          tmp &= (0x0FuL << (4u * (position & 0x03u)));
000066  0796              LSLS     r6,r2,#30
000068  0f37              LSRS     r7,r6,#28
00006a  fa08f607          LSL      r6,r8,r7
00006e  ea060c04          AND      r12,r6,r4
;;;371          if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
000072  f1b04f90          CMP      r0,#0x48000000
000076  d004              BEQ      |L1.130|
000078  4c1f              LDR      r4,|L1.248|
00007a  42a0              CMP      r0,r4
00007c  d103              BNE      |L1.134|
00007e  2401              MOVS     r4,#1
000080  e01b              B        |L1.186|
                  |L1.130|
000082  2400              MOVS     r4,#0
000084  e019              B        |L1.186|
                  |L1.134|
000086  4c1d              LDR      r4,|L1.252|
000088  42a0              CMP      r0,r4
00008a  d101              BNE      |L1.144|
00008c  2402              MOVS     r4,#2
00008e  e014              B        |L1.186|
                  |L1.144|
000090  4c1b              LDR      r4,|L1.256|
000092  42a0              CMP      r0,r4
000094  d101              BNE      |L1.154|
000096  2403              MOVS     r4,#3
000098  e00f              B        |L1.186|
                  |L1.154|
00009a  4c1a              LDR      r4,|L1.260|
00009c  42a0              CMP      r0,r4
00009e  d101              BNE      |L1.164|
0000a0  2404              MOVS     r4,#4
0000a2  e00a              B        |L1.186|
                  |L1.164|
0000a4  4c18              LDR      r4,|L1.264|
0000a6  42a0              CMP      r0,r4
0000a8  d101              BNE      |L1.174|
0000aa  2405              MOVS     r4,#5
0000ac  e005              B        |L1.186|
                  |L1.174|
0000ae  4c17              LDR      r4,|L1.268|
0000b0  42a0              CMP      r0,r4
0000b2  d101              BNE      |L1.184|
0000b4  2406              MOVS     r4,#6
0000b6  e000              B        |L1.186|
                  |L1.184|
0000b8  2407              MOVS     r4,#7
                  |L1.186|
0000ba  40bc              LSLS     r4,r4,r7
0000bc  4564              CMP      r4,r12
0000be  d112              BNE      |L1.230|
;;;372          {
;;;373            tmp = 0x0FuL << (4u * (position & 0x03u));
;;;374            SYSCFG->EXTICR[position >> 2u] &= ~tmp;
0000c0  68ac              LDR      r4,[r5,#8]
0000c2  43b4              BICS     r4,r4,r6
0000c4  60ac              STR      r4,[r5,#8]
;;;375    
;;;376            /* Clear EXTI line configuration */
;;;377            EXTI->IMR1 &= ~(iocurrent);
0000c6  4c12              LDR      r4,|L1.272|
0000c8  6825              LDR      r5,[r4,#0]
0000ca  439d              BICS     r5,r5,r3
0000cc  6025              STR      r5,[r4,#0]
;;;378            EXTI->EMR1 &= ~(iocurrent);
0000ce  1d24              ADDS     r4,r4,#4
0000d0  6825              LDR      r5,[r4,#0]
0000d2  439d              BICS     r5,r5,r3
0000d4  6025              STR      r5,[r4,#0]
;;;379    
;;;380            /* Clear Rising Falling edge configuration */
;;;381            EXTI->RTSR1 &= ~(iocurrent);
0000d6  1d24              ADDS     r4,r4,#4
0000d8  6825              LDR      r5,[r4,#0]
0000da  439d              BICS     r5,r5,r3
0000dc  6025              STR      r5,[r4,#0]
;;;382            EXTI->FTSR1 &= ~(iocurrent);
0000de  1d24              ADDS     r4,r4,#4
0000e0  6825              LDR      r5,[r4,#0]
0000e2  439d              BICS     r5,r5,r3
0000e4  6025              STR      r5,[r4,#0]
                  |L1.230|
0000e6  1c52              ADDS     r2,r2,#1
                  |L1.232|
0000e8  fa31f302          LSRS     r3,r1,r2              ;338
0000ec  d192              BNE      |L1.20|
;;;383          }
;;;384        }
;;;385    
;;;386        position++;
;;;387      }
;;;388    }
0000ee  e8bd8ff0          POP      {r4-r11,pc}
;;;389    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L1.244|
                          DCD      0x40010000
                  |L1.248|
                          DCD      0x48000400
                  |L1.252|
                          DCD      0x48000800
                  |L1.256|
                          DCD      0x48000c00
                  |L1.260|
                          DCD      0x48001000
                  |L1.264|
                          DCD      0x48001400
                  |L1.268|
                          DCD      0x48001800
                  |L1.272|
                          DCD      0x40010400

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;536      */
;;;537    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;538    {
;;;539      /* Prevent unused argument(s) compilation warning */
;;;540      UNUSED(GPIO_Pin);
;;;541    
;;;542      /* NOTE: This function should not be modified, when the callback is needed,
;;;543               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;544       */
;;;545    }
;;;546    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;521      */
;;;522    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  4904              LDR      r1,|L3.20|
;;;523    {
000002  b510              PUSH     {r4,lr}
;;;524      /* EXTI line interrupt detected */
;;;525      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
000004  680a              LDR      r2,[r1,#0]
000006  4202              TST      r2,r0
000008  d002              BEQ      |L3.16|
;;;526      {
;;;527        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000a  6008              STR      r0,[r1,#0]
;;;528        HAL_GPIO_EXTI_Callback(GPIO_Pin);
00000c  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L3.16|
;;;529      }
;;;530    }
000010  bd10              POP      {r4,pc}
;;;531    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40010414

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;187      */
;;;188    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;189    {
;;;190      uint32_t position = 0x00u;
;;;191      uint32_t iocurrent;
;;;192      uint32_t temp;
;;;193    
;;;194      /* Check the parameters */
;;;195      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;196      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;197      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;198      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;199    
;;;200      /* Configure the port pins */
;;;201      while (((GPIO_Init->Pin) >> position) != 0x00u)
;;;202      {
;;;203        /* Get current io position */
;;;204        iocurrent = (GPIO_Init->Pin) & (1uL << position);
;;;205    
;;;206        if (iocurrent != 0x00u)
;;;207        {
;;;208          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;209          /* In case of Alternate function mode selection */
;;;210          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;211          {
;;;212            /* Check the Alternate function parameters */
;;;213            assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
;;;214            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;215    
;;;216            /* Configure Alternate function mapped with the current IO */
;;;217            temp = GPIOx->AFR[position >> 3u];
;;;218            temp &= ~(0xFu << ((position & 0x07u) * 4u));
;;;219            temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
;;;220            GPIOx->AFR[position >> 3u] = temp;
;;;221          }
;;;222    
;;;223          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;224          temp = GPIOx->MODER;
;;;225          temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
;;;226          temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
;;;227          GPIOx->MODER = temp;
;;;228    
;;;229          /* In case of Output or Alternate function mode selection */
;;;230          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
;;;231             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
;;;232          {
;;;233            /* Check the Speed parameter */
;;;234            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;235            /* Configure the IO Speed */
;;;236            temp = GPIOx->OSPEEDR;
;;;237            temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
;;;238            temp |= (GPIO_Init->Speed << (position * 2u));
;;;239            GPIOx->OSPEEDR = temp;
;;;240    
;;;241            /* Configure the IO Output Type */
;;;242            temp = GPIOx->OTYPER;
;;;243            temp &= ~(GPIO_OTYPER_OT0 << position) ;
;;;244            temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
;;;245            GPIOx->OTYPER = temp;
;;;246          }
;;;247    
;;;248    #if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
;;;249    
;;;250          /* In case of Analog mode, check if ADC control mode is selected */
;;;251          if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
;;;252          {
;;;253            /* Configure the IO Output Type */
;;;254            temp = GPIOx->ASCR;
;;;255            temp &= ~(GPIO_ASCR_ASC0 << position) ;
;;;256            temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
;;;257            GPIOx->ASCR = temp;
;;;258          }
;;;259    
;;;260    #endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
;;;261    
;;;262          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;263          temp = GPIOx->PUPDR;
;;;264          temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
;;;265          temp |= ((GPIO_Init->Pull) << (position * 2u));
;;;266          GPIOx->PUPDR = temp;
;;;267    
;;;268          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;269          /* Configure the External Interrupt or event for the current IO */
;;;270          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
;;;271          {
;;;272            /* Enable SYSCFG Clock */
;;;273            __HAL_RCC_SYSCFG_CLK_ENABLE();
;;;274    
;;;275            temp = SYSCFG->EXTICR[position >> 2u];
;;;276            temp &= ~(0x0FuL << (4u * (position & 0x03u)));
;;;277            temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
;;;278            SYSCFG->EXTICR[position >> 2u] = temp;
;;;279    
;;;280            /* Clear EXTI line configuration */
;;;281            temp = EXTI->IMR1;
000004  f8df91a0          LDR      r9,|L4.424|
000008  2200              MOVS     r2,#0                 ;190
;;;282            temp &= ~(iocurrent);
;;;283            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
;;;284            {
;;;285              temp |= iocurrent;
;;;286            }
;;;287            EXTI->IMR1 = temp;
;;;288    
;;;289            temp = EXTI->EMR1;
00000a  f1090a04          ADD      r10,r9,#4
;;;290            temp &= ~(iocurrent);
;;;291            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
;;;292            {
;;;293              temp |= iocurrent;
;;;294            }
;;;295            EXTI->EMR1 = temp;
;;;296    
;;;297            /* Clear Rising Falling edge configuration */
;;;298            temp = EXTI->RTSR1;
00000e  f10a0b04          ADD      r11,r10,#4
000012  f04f080f          MOV      r8,#0xf               ;218
;;;299            temp &= ~(iocurrent);
;;;300            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
;;;301            {
;;;302              temp |= iocurrent;
;;;303            }
;;;304            EXTI->RTSR1 = temp;
;;;305    
;;;306            temp = EXTI->FTSR1;
000016  f10b0e04          ADD      lr,r11,#4
00001a  e0be              B        |L4.410|
                  |L4.28|
00001c  2401              MOVS     r4,#1                 ;204
00001e  4094              LSLS     r4,r4,r2              ;204
000020  4023              ANDS     r3,r3,r4              ;204
000022  d075              BEQ      |L4.272|
000024  684d              LDR      r5,[r1,#4]            ;210
000026  2d02              CMP      r5,#2                 ;210
000028  d001              BEQ      |L4.46|
00002a  2d12              CMP      r5,#0x12              ;210
00002c  d111              BNE      |L4.82|
                  |L4.46|
00002e  08d5              LSRS     r5,r2,#3              ;217
000030  eb000785          ADD      r7,r0,r5,LSL #2       ;217
000034  6a3e              LDR      r6,[r7,#0x20]         ;217
000036  0755              LSLS     r5,r2,#29             ;218
000038  0eed              LSRS     r5,r5,#27             ;218
00003a  fa08fc05          LSL      r12,r8,r5             ;218
00003e  ea26060c          BIC      r6,r6,r12             ;218
000042  f8d1c010          LDR      r12,[r1,#0x10]        ;219
000046  fa0cfc05          LSL      r12,r12,r5            ;219
00004a  ea4c0c06          ORR      r12,r12,r6            ;219
00004e  f8c7c020          STR      r12,[r7,#0x20]        ;220
                  |L4.82|
000052  6807              LDR      r7,[r0,#0]            ;224
000054  0055              LSLS     r5,r2,#1              ;225
000056  2603              MOVS     r6,#3                 ;225
000058  f891c004          LDRB     r12,[r1,#4]           ;226
00005c  40ae              LSLS     r6,r6,r5              ;225
00005e  f00c0c03          AND      r12,r12,#3            ;226
000062  43b7              BICS     r7,r7,r6              ;225
000064  fa0cfc05          LSL      r12,r12,r5            ;226
000068  ea4c0c07          ORR      r12,r12,r7            ;226
00006c  f8c0c000          STR      r12,[r0,#0]           ;227
000070  684f              LDR      r7,[r1,#4]            ;230
000072  2f01              CMP      r7,#1                 ;230
000074  d005              BEQ      |L4.130|
000076  2f02              CMP      r7,#2                 ;230
000078  d003              BEQ      |L4.130|
00007a  2f11              CMP      r7,#0x11              ;231
00007c  d001              BEQ      |L4.130|
00007e  2f12              CMP      r7,#0x12              ;231
000080  d115              BNE      |L4.174|
                  |L4.130|
000082  6887              LDR      r7,[r0,#8]            ;236
000084  f8d1c00c          LDR      r12,[r1,#0xc]         ;238
000088  43b7              BICS     r7,r7,r6              ;237
00008a  fa0cfc05          LSL      r12,r12,r5            ;238
00008e  ea4c0c07          ORR      r12,r12,r7            ;238
000092  f8c0c008          STR      r12,[r0,#8]           ;239
000096  6847              LDR      r7,[r0,#4]            ;242
000098  f891c004          LDRB     r12,[r1,#4]           ;244
00009c  43a7              BICS     r7,r7,r4              ;243
00009e  f3cc1c00          UBFX     r12,r12,#4,#1         ;244
0000a2  fa0cfc02          LSL      r12,r12,r2            ;244
0000a6  ea4c0c07          ORR      r12,r12,r7            ;244
0000aa  f8c0c004          STR      r12,[r0,#4]           ;245
                  |L4.174|
0000ae  f8d1c004          LDR      r12,[r1,#4]           ;251
0000b2  ea6f070c          MVN      r7,r12                ;251
0000b6  07bf              LSLS     r7,r7,#30             ;251
0000b8  d106              BNE      |L4.200|
0000ba  6ac7              LDR      r7,[r0,#0x2c]         ;254
0000bc  43a7              BICS     r7,r7,r4              ;255
0000be  f3cc04c0          UBFX     r4,r12,#3,#1          ;256
0000c2  4094              LSLS     r4,r4,r2              ;256
0000c4  433c              ORRS     r4,r4,r7              ;256
0000c6  62c4              STR      r4,[r0,#0x2c]         ;257
                  |L4.200|
0000c8  68c4              LDR      r4,[r0,#0xc]          ;263
0000ca  43b4              BICS     r4,r4,r6              ;264
0000cc  688e              LDR      r6,[r1,#8]            ;265
0000ce  40ae              LSLS     r6,r6,r5              ;265
0000d0  4326              ORRS     r6,r6,r4              ;265
0000d2  60c6              STR      r6,[r0,#0xc]          ;266
0000d4  684c              LDR      r4,[r1,#4]            ;270
0000d6  00e4              LSLS     r4,r4,#3              ;270
0000d8  d55e              BPL      |L4.408|
0000da  4c34              LDR      r4,|L4.428|
0000dc  6e25              LDR      r5,[r4,#0x60]         ;273
0000de  f0450501          ORR      r5,r5,#1              ;273
0000e2  6625              STR      r5,[r4,#0x60]         ;273
0000e4  6e24              LDR      r4,[r4,#0x60]         ;273
0000e6  f0220503          BIC      r5,r2,#3              ;275
0000ea  f0040401          AND      r4,r4,#1              ;273
0000ee  9400              STR      r4,[sp,#0]            ;275
0000f0  4c2f              LDR      r4,|L4.432|
0000f2  192e              ADDS     r6,r5,r4              ;275
0000f4  68b7              LDR      r7,[r6,#8]            ;275
0000f6  0794              LSLS     r4,r2,#30             ;276
0000f8  0f25              LSRS     r5,r4,#28             ;276
0000fa  fa08f405          LSL      r4,r8,r5              ;276
0000fe  43a7              BICS     r7,r7,r4              ;276
000100  f1b04f90          CMP      r0,#0x48000000        ;277
000104  d005              BEQ      |L4.274|
000106  4c2b              LDR      r4,|L4.436|
000108  42a0              CMP      r0,r4                 ;277
00010a  d104              BNE      |L4.278|
00010c  2401              MOVS     r4,#1                 ;277
00010e  e01c              B        |L4.330|
                  |L4.272|
000110  e042              B        |L4.408|
                  |L4.274|
000112  2400              MOVS     r4,#0                 ;277
000114  e019              B        |L4.330|
                  |L4.278|
000116  4c28              LDR      r4,|L4.440|
000118  42a0              CMP      r0,r4                 ;277
00011a  d101              BNE      |L4.288|
00011c  2402              MOVS     r4,#2                 ;277
00011e  e014              B        |L4.330|
                  |L4.288|
000120  4c26              LDR      r4,|L4.444|
000122  42a0              CMP      r0,r4                 ;277
000124  d101              BNE      |L4.298|
000126  2403              MOVS     r4,#3                 ;277
000128  e00f              B        |L4.330|
                  |L4.298|
00012a  4c25              LDR      r4,|L4.448|
00012c  42a0              CMP      r0,r4                 ;277
00012e  d101              BNE      |L4.308|
000130  2404              MOVS     r4,#4                 ;277
000132  e00a              B        |L4.330|
                  |L4.308|
000134  4c23              LDR      r4,|L4.452|
000136  42a0              CMP      r0,r4                 ;277
000138  d101              BNE      |L4.318|
00013a  2405              MOVS     r4,#5                 ;277
00013c  e005              B        |L4.330|
                  |L4.318|
00013e  4c22              LDR      r4,|L4.456|
000140  42a0              CMP      r0,r4                 ;277
000142  d101              BNE      |L4.328|
000144  2406              MOVS     r4,#6                 ;277
000146  e000              B        |L4.330|
                  |L4.328|
000148  2407              MOVS     r4,#7                 ;277
                  |L4.330|
00014a  40ac              LSLS     r4,r4,r5              ;277
00014c  433c              ORRS     r4,r4,r7              ;277
00014e  60b4              STR      r4,[r6,#8]            ;278
000150  f8d94000          LDR      r4,[r9,#0]            ;281
000154  464d              MOV      r5,r9                 ;281
000156  684e              LDR      r6,[r1,#4]            ;283
000158  439c              BICS     r4,r4,r3              ;282
00015a  03f6              LSLS     r6,r6,#15             ;283
00015c  d500              BPL      |L4.352|
00015e  431c              ORRS     r4,r4,r3              ;285
                  |L4.352|
000160  602c              STR      r4,[r5,#0]            ;287
000162  f8da4000          LDR      r4,[r10,#0]           ;289
000166  4655              MOV      r5,r10                ;289
000168  684e              LDR      r6,[r1,#4]            ;291
00016a  439c              BICS     r4,r4,r3              ;290
00016c  03b6              LSLS     r6,r6,#14             ;291
00016e  d500              BPL      |L4.370|
000170  431c              ORRS     r4,r4,r3              ;293
                  |L4.370|
000172  602c              STR      r4,[r5,#0]            ;295
000174  f8db4000          LDR      r4,[r11,#0]           ;298
000178  465d              MOV      r5,r11                ;298
00017a  684e              LDR      r6,[r1,#4]            ;300
00017c  439c              BICS     r4,r4,r3              ;299
00017e  02f6              LSLS     r6,r6,#11             ;300
000180  d500              BPL      |L4.388|
000182  431c              ORRS     r4,r4,r3              ;302
                  |L4.388|
000184  602c              STR      r4,[r5,#0]            ;304
000186  f8de4000          LDR      r4,[lr,#0]
00018a  4675              MOV      r5,lr
;;;307            temp &= ~(iocurrent);
;;;308            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
00018c  684e              LDR      r6,[r1,#4]
00018e  439c              BICS     r4,r4,r3              ;307
000190  02b6              LSLS     r6,r6,#10
000192  d500              BPL      |L4.406|
;;;309            {
;;;310              temp |= iocurrent;
000194  431c              ORRS     r4,r4,r3
                  |L4.406|
;;;311            }
;;;312            EXTI->FTSR1 = temp;
000196  602c              STR      r4,[r5,#0]
                  |L4.408|
000198  1c52              ADDS     r2,r2,#1
                  |L4.410|
00019a  680b              LDR      r3,[r1,#0]            ;201
00019c  fa33f402          LSRS     r4,r3,r2              ;201
0001a0  f47faf3c          BNE      |L4.28|
;;;313          }
;;;314        }
;;;315    
;;;316        position++;
;;;317      }
;;;318    }
0001a4  e8bd8ff8          POP      {r3-r11,pc}
;;;319    
                          ENDP

                  |L4.424|
                          DCD      0x40010400
                  |L4.428|
                          DCD      0x40021000
                  |L4.432|
                          DCD      0x40010000
                  |L4.436|
                          DCD      0x48000400
                  |L4.440|
                          DCD      0x48000800
                  |L4.444|
                          DCD      0x48000c00
                  |L4.448|
                          DCD      0x48001000
                  |L4.452|
                          DCD      0x48001400
                  |L4.456|
                          DCD      0x48001800

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;487      */
;;;488    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;489    {
;;;490      __IO uint32_t tmp = GPIO_LCKR_LCKK;
;;;491    
;;;492      /* Check the parameters */
;;;493      assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
;;;494      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;495    
;;;496      /* Apply lock key write sequence */
;;;497      tmp |= GPIO_Pin;
000002  f4413280          ORR      r2,r1,#0x10000
;;;498      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;499      GPIOx->LCKR = tmp;
000006  9200              STR      r2,[sp,#0]
000008  61c2              STR      r2,[r0,#0x1c]
;;;500      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;501      GPIOx->LCKR = GPIO_Pin;
00000a  61c1              STR      r1,[r0,#0x1c]
;;;502      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;503      GPIOx->LCKR = tmp;
00000c  9900              LDR      r1,[sp,#0]
00000e  61c1              STR      r1,[r0,#0x1c]
;;;504      /* Read LCKK bit*/
;;;505      tmp = GPIOx->LCKR;
000010  69c1              LDR      r1,[r0,#0x1c]
;;;506    
;;;507      if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
000012  9100              STR      r1,[sp,#0]
000014  69c0              LDR      r0,[r0,#0x1c]
000016  03c0              LSLS     r0,r0,#15
000018  d501              BPL      |L5.30|
;;;508      {
;;;509        return HAL_OK;
00001a  2000              MOVS     r0,#0
;;;510      }
;;;511      else
;;;512      {
;;;513        return HAL_ERROR;
;;;514      }
;;;515    }
00001c  bd08              POP      {r3,pc}
                  |L5.30|
00001e  2001              MOVS     r0,#1                 ;513
000020  bd08              POP      {r3,pc}
;;;516    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;412      */
;;;413    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6900              LDR      r0,[r0,#0x10]
;;;414    {
;;;415      GPIO_PinState bitstatus;
;;;416    
;;;417      /* Check the parameters */
;;;418      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;419    
;;;420      if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
000002  4008              ANDS     r0,r0,r1
000004  d000              BEQ      |L6.8|
;;;421      {
;;;422        bitstatus = GPIO_PIN_SET;
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;423      }
;;;424      else
;;;425      {
;;;426        bitstatus = GPIO_PIN_RESET;
;;;427      }
;;;428      return bitstatus;
;;;429    }
000008  4770              BX       lr
;;;430    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;468      */
;;;469    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;470    {
;;;471      /* Check the parameters */
;;;472      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;473    
;;;474      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;475    }
000006  4770              BX       lr
;;;476    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;446      */
;;;447    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  b10a              CBZ      r2,|L8.6|
;;;448    {
;;;449      /* Check the parameters */
;;;450      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;451      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;452    
;;;453      if(PinState != GPIO_PIN_RESET)
;;;454      {
;;;455        GPIOx->BSRR = (uint32_t)GPIO_Pin;
000002  6181              STR      r1,[r0,#0x18]
;;;456      }
;;;457      else
;;;458      {
;;;459        GPIOx->BRR = (uint32_t)GPIO_Pin;
;;;460      }
;;;461    }
000004  4770              BX       lr
                  |L8.6|
000006  6281              STR      r1,[r0,#0x28]         ;459
000008  4770              BX       lr
;;;462    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\HALLIB\\STM32L4xx_HAL_Driver\\Src\\stm32l4xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32l4xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\CORE\\cmsis_armcc.h"
|__asm___20_stm32l4xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32l4xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32l4xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32l4xx_hal_gpio_c_ea787061____RRX|
#line 587
|__asm___20_stm32l4xx_hal_gpio_c_ea787061____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
